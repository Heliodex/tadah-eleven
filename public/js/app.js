/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n//require('./bootstrap');\n; /// files: roblox.js, jquery.json-2.2.js, jquery.simplemodal-1.3.5.js, jquery.tipsy.js, AjaxAvatarThumbnail.js, extensions/string.js, StringTruncator.min.js, json2.min.js, webkit.js, GoogleAnalytics/GoogleAnalyticsEvents.js, MasterPageUI.js, jquery.cookie.js, jquery.jsoncookie.js, XsrfToken.js, RobloxEventManager.js, RobloxEventListener.js, KontagentEventListener.js, GoogleEventListener.js, MongoEventListener.js, SearchVisionListener.js, SiteTouchEvent.js, JSErrorTracker.js, Studio2Alert.js, ClientInstaller.js, InstallationInstructions.js, MadStatus.js, PlaceLauncher.js, VideoPreRoll.js\n\n; /// roblox.js\n\n(function (n, t) {\n  function p(n, i) {\n    var r = i.split(\".\");\n\n    for (i = r.shift(); r.length > 0; n = n[i], i = r.shift()) {\n      if (n[i] === t) return t;\n    }\n\n    return n[i];\n  }\n\n  function k(n, i, r) {\n    var u = i.split(\".\");\n\n    for (i = u.shift(); u.length > 0; n = n[i], i = u.shift()) {\n      n[i] === t && (n[i] = {});\n    }\n\n    n[i] = r;\n  }\n\n  function nt(n, t) {\n    var i = f.createElement(\"link\");\n    i.href = n, i.rel = \"stylesheet\", i.type = \"text/css\", u.parentNode.insertBefore(i, u), t();\n  }\n\n  function g(n, t) {\n    var i = f.createElement(\"script\");\n    i.type = \"text/javascript\", i.src = n, i.onload = i.onreadystatechange = function () {\n      i.readyState && i.readyState != \"loaded\" && i.readyState != \"complete\" || (t(), i.onload = i.onreadystatechange = null);\n    }, u.parentNode.insertBefore(i, u);\n  }\n\n  function d(n) {\n    return n.split(\".\").pop().split(\"?\").shift();\n  }\n\n  function o(n) {\n    return n.indexOf(\".js\") < 0 ? n : n.indexOf(r.modulePath) >= 0 ? n.split(r.modulePath).pop().split(\".js\").shift().replace(\"/\", \".\") : n;\n  }\n\n  function v(n) {\n    var t, i;\n    return t = n.indexOf(\".js\") >= 0 || n.indexOf(\".css\") >= 0 ? n : r.baseUrl + r.modulePath + n.replace(\".\", \"/\") + \".js\", i = r.versions[t] || 1, t + \"?v=\" + i;\n  }\n\n  function s(n) {\n    for (var r, u = [], i = 0; i < n.length; i++) {\n      r = p(Roblox, o(n[i])), r !== t && u.push(r);\n    }\n\n    return u;\n  }\n\n  function e(n) {\n    var t = i[n];\n    if (t.loaded && t.depsLoaded) while (t.listeners.length > 0) {\n      t.listeners.shift()();\n    }\n  }\n\n  function a(n, u) {\n    var f, s, h;\n    if (!b(n) || r.externalResources.toString().indexOf(n) >= 0) return u();\n    f = o(n), i[f] === t ? (i[f] = {\n      loaded: !1,\n      depsLoaded: !0,\n      listeners: []\n    }, i[f].listeners.push(u), s = v(f), h = d(s) == \"css\" ? nt : g, h(s, function () {\n      i[f].loaded = !0, e(f);\n    })) : (i[f].listeners.push(u), e(f));\n  }\n\n  function h(n, t) {\n    var r = n.shift(),\n        i = n.length == 0 ? t : function () {\n      h(n, t);\n    };\n    a(r, i);\n  }\n\n  function l(n, t) {\n    c(n) || (n = [n]);\n\n    var i = function i() {\n      t.apply(null, s(n));\n    };\n\n    h(n.slice(0), i);\n  }\n\n  function y(n, t, r) {\n    w(t) ? (r = t, t = []) : c(t) || (t = [t]), i[n] = i[n] || {\n      loaded: !0,\n      listeners: []\n    }, i[n].depsLoaded = !1, i[n].listeners.unshift(function () {\n      k(Roblox, n, r.apply(null, s(t)));\n    }), l(t, function () {\n      i[n].depsLoaded = !0, e(n);\n    });\n  }\n\n  var f = n.document,\n      u = f.getElementsByTagName(\"script\")[0],\n      b = function b(n) {\n    return typeof n == \"string\";\n  },\n      c = function c(n) {\n    return Object.prototype.toString.call(n) == \"[object Array]\";\n  },\n      w = function w(n) {\n    return Object.prototype.toString.call(n) == \"[object Function]\";\n  },\n      i = {},\n      r = {\n    baseUrl: \"/\",\n    modulePath: \"js/modules/\",\n    versions: {},\n    externalResources: []\n  };\n\n  typeof Roblox == \"undefined\" && (Roblox = {}), Roblox.config = r, Roblox.require = l, Roblox.define = y;\n})(window);\n\n; /// jquery.json-2.2.js\n\n(function (n) {\n  n.toJSON = function (t) {\n    var s, o, p, h, f, e, r, v, c, a, u, l, i, y;\n    if (_typeof(JSON) == \"object\" && JSON.stringify) return JSON.stringify(t);\n    if (i = _typeof(t), t === null) return \"null\";\n    if (i == \"undefined\") return undefined;\n    if (i == \"number\" || i == \"boolean\") return t + \"\";\n    if (i == \"string\") return n.quoteString(t);\n\n    if (i == \"object\") {\n      if (typeof t.toJSON == \"function\") return n.toJSON(t.toJSON());\n      if (t.constructor === Date) return s = t.getUTCMonth() + 1, s < 10 && (s = \"0\" + s), o = t.getUTCDate(), o < 10 && (o = \"0\" + o), p = t.getUTCFullYear(), h = t.getUTCHours(), h < 10 && (h = \"0\" + h), f = t.getUTCMinutes(), f < 10 && (f = \"0\" + f), e = t.getUTCSeconds(), e < 10 && (e = \"0\" + e), r = t.getUTCMilliseconds(), r < 100 && (r = \"0\" + r), r < 10 && (r = \"0\" + r), '\"' + p + \"-\" + s + \"-\" + o + \"T\" + h + \":\" + f + \":\" + e + \".\" + r + 'Z\"';\n\n      if (t.constructor === Array) {\n        for (v = [], c = 0; c < t.length; c++) {\n          v.push(n.toJSON(t[c]) || \"null\");\n        }\n\n        return \"[\" + v.join(\",\") + \"]\";\n      }\n\n      a = [];\n\n      for (u in t) {\n        if (i = _typeof(u), i == \"number\") l = '\"' + u + '\"';else if (i == \"string\") l = n.quoteString(u);else continue;\n        typeof t[u] != \"function\" && (y = n.toJSON(t[u]), a.push(l + \":\" + y));\n      }\n\n      return \"{\" + a.join(\", \") + \"}\";\n    }\n  }, n.evalJSON = function (n) {\n    return _typeof(JSON) == \"object\" && JSON.parse ? JSON.parse(n) : eval(\"(\" + n + \")\");\n  }, n.secureEvalJSON = function (n) {\n    if (_typeof(JSON) == \"object\" && JSON.parse) return JSON.parse(n);\n    var t = n;\n    if (t = t.replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\"), t = t.replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \"]\"), t = t.replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\"), /^[\\],:{}\\s]*$/.test(t)) return eval(\"(\" + n + \")\");\n    throw new SyntaxError(\"Error parsing JSON, source is not valid.\");\n  }, n.quoteString = function (n) {\n    return n.match(t) ? '\"' + n.replace(t, function (n) {\n      var t = i[n];\n      return typeof t == \"string\" ? t : (t = n.charCodeAt(), \"\\\\u00\" + Math.floor(t / 16).toString(16) + (t % 16).toString(16));\n    }) + '\"' : '\"' + n + '\"';\n  };\n  var t = /[\"\\\\\\x00-\\x1f\\x7f-\\x9f]/g,\n      i = {\n    \"\\b\": \"\\\\b\",\n    \"\\t\": \"\\\\t\",\n    \"\\n\": \"\\\\n\",\n    \"\\f\": \"\\\\f\",\n    \"\\r\": \"\\\\r\",\n    '\"': '\\\\\"',\n    \"\\\\\": \"\\\\\\\\\"\n  };\n})(jQuery);\n\n; /// jquery.simplemodal-1.3.5.js\n\n(function (n) {\n  var i = n.browser.msie && parseInt(n.browser.version) == 6 && _typeof(window.XMLHttpRequest) != \"object\",\n      r = !1,\n      t = [];\n  n.modal = function (t, i) {\n    return n.modal.impl.init(t, i);\n  }, n.modal.close = function () {\n    n.modal.impl.close();\n  }, n.fn.modal = function (t) {\n    return n.modal.impl.init(this, t);\n  }, n.modal.defaults = {\n    appendTo: \"body\",\n    focus: !0,\n    opacity: 50,\n    overlayId: \"simplemodal-overlay\",\n    overlayCss: {},\n    containerId: \"simplemodal-container\",\n    containerCss: {},\n    dataId: \"simplemodal-data\",\n    dataCss: {},\n    minHeight: null,\n    minWidth: null,\n    maxHeight: null,\n    maxWidth: null,\n    autoResize: !1,\n    autoPosition: !0,\n    zIndex: 1e3,\n    close: !0,\n    closeHTML: '<a class=\"modalCloseImg\" title=\"Close\"></a>',\n    closeClass: \"simplemodal-close\",\n    escClose: !0,\n    overlayClose: !1,\n    position: null,\n    persist: !1,\n    modal: !0,\n    onOpen: null,\n    onShow: null,\n    onClose: null\n  }, n.modal.impl = {\n    o: null,\n    d: {},\n    init: function init(t, i) {\n      var r = this;\n      if (r.d.data) return !1;\n      if (r.o = n.extend({}, n.modal.defaults, i), r.zIndex = r.o.zIndex, r.occb = !1, _typeof(t) == \"object\") t = t instanceof jQuery ? t : n(t), r.d.placeholder = !1, t.parent().parent().size() > 0 && (t.before(n(\"<span></span>\").attr(\"id\", \"simplemodal-placeholder\").css({\n        display: \"none\"\n      })), r.d.placeholder = !0, r.display = t.css(\"display\"), r.o.persist || (r.d.orig = t.clone(!0)));else if (typeof t == \"string\" || typeof t == \"number\") t = n(\"<div></div>\").html(t);else return alert(\"SimpleModal Error: Unsupported data type: \" + _typeof(t)), r;\n      return r.create(t), t = null, r.open(), n.isFunction(r.o.onShow) && r.o.onShow.apply(r, [r.d]), r;\n    },\n    create: function create(r) {\n      var u = this;\n      t = u.getDimensions(), u.o.modal && i && (u.d.iframe = n('<iframe src=\"javascript:false;\"></iframe>').css(n.extend(u.o.iframeCss, {\n        display: \"none\",\n        opacity: 0,\n        position: \"fixed\",\n        height: t[0],\n        width: t[1],\n        zIndex: u.o.zIndex,\n        top: 0,\n        left: 0\n      })).appendTo(u.o.appendTo)), u.d.overlay = n(\"<div></div>\").attr(\"id\", u.o.overlayId).addClass(\"simplemodal-overlay\").css(n.extend(u.o.overlayCss, {\n        display: \"none\",\n        opacity: u.o.opacity / 100,\n        height: u.o.modal ? t[0] : 0,\n        width: u.o.modal ? t[1] : 0,\n        position: \"fixed\",\n        left: 0,\n        top: 0,\n        zIndex: u.o.zIndex + 1\n      })).appendTo(u.o.appendTo), u.d.container = n(\"<div></div>\").attr(\"id\", u.o.containerId).addClass(\"simplemodal-container\").css(n.extend(u.o.containerCss, {\n        display: \"none\",\n        position: \"fixed\",\n        zIndex: u.o.zIndex + 2\n      })).append(u.o.close && u.o.closeHTML ? n(u.o.closeHTML).addClass(u.o.closeClass) : \"\").appendTo(u.o.appendTo), u.d.wrap = n(\"<div></div>\").attr(\"tabIndex\", -1).addClass(\"simplemodal-wrap\").css({\n        height: \"100%\",\n        outline: 0,\n        width: \"100%\",\n        overflow: \"visible\"\n      }).appendTo(u.d.container), u.d.data = r.attr(\"id\", r.attr(\"id\") || u.o.dataId).addClass(\"simplemodal-data\").css(n.extend(u.o.dataCss, {\n        display: \"none\"\n      })).appendTo(\"body\"), r = null, u.setContainerDimensions(), u.d.data.appendTo(u.d.wrap), i && u.fixIE();\n    },\n    bindEvents: function bindEvents() {\n      var r = this;\n      n(\".\" + r.o.closeClass).bind(\"click.simplemodal\", function (n) {\n        n.preventDefault(), r.close();\n      }), r.o.modal && r.o.close && r.o.overlayClose && r.d.overlay.bind(\"click.simplemodal\", function (n) {\n        n.preventDefault(), r.close();\n      }), n(document).bind(\"keydown.simplemodal\", function (n) {\n        r.o.modal && r.o.focus && n.keyCode == 9 ? r.watchTab(n) : r.o.close && r.o.escClose && n.keyCode == 27 && (n.preventDefault(), r.close());\n      }), n(window).bind(\"resize.simplemodal\", function () {\n        t = r.getDimensions(), r.setContainerDimensions(!0), i ? r.fixIE() : r.o.modal && (r.d.iframe && r.d.iframe.css({\n          height: t[0],\n          width: t[1]\n        }), r.d.overlay.css({\n          height: t[0],\n          width: t[1]\n        }));\n      });\n    },\n    unbindEvents: function unbindEvents() {\n      n(\".\" + this.o.closeClass).unbind(\"click.simplemodal\"), n(document).unbind(\"keydown.simplemodal\"), n(window).unbind(\"resize.simplemodal\"), this.d.overlay.unbind(\"click.simplemodal\");\n    },\n    fixIE: function fixIE() {\n      var i = this,\n          t = i.o.position;\n      n.each([i.d.iframe || null, i.o.modal ? i.d.overlay : null, i.d.container], function (n, i) {\n        var l, c, o, e;\n\n        if (i) {\n          var s = \"document.body.clientHeight\",\n              h = \"document.body.clientWidth\",\n              b = \"document.body.scrollHeight\",\n              a = \"document.body.scrollLeft\",\n              v = \"document.body.scrollTop\",\n              p = \"document.body.scrollWidth\",\n              y = \"document.documentElement.clientHeight\",\n              w = \"document.documentElement.clientWidth\",\n              u = \"document.documentElement.scrollLeft\",\n              f = \"document.documentElement.scrollTop\",\n              r = i[0].style;\n          r.position = \"absolute\", n < 2 ? (r.removeExpression(\"height\"), r.removeExpression(\"width\"), r.setExpression(\"height\", \"\" + b + \" > \" + s + \" ? \" + b + \" : \" + s + ' + \"px\"'), r.setExpression(\"width\", \"\" + p + \" > \" + h + \" ? \" + p + \" : \" + h + ' + \"px\"')) : (t && t.constructor == Array ? (o = t[0] ? typeof t[0] == \"number\" ? t[0].toString() : t[0].replace(/px/, \"\") : i.css(\"top\").replace(/px/, \"\"), l = o.indexOf(\"%\") == -1 ? o + \" + (t = \" + f + \" ? \" + f + \" : \" + v + ') + \"px\"' : parseInt(o.replace(/%/, \"\")) + \" * ((\" + y + \" || \" + s + \") / 100) + (t = \" + f + \" ? \" + f + \" : \" + v + ') + \"px\"', t[1] && (e = typeof t[1] == \"number\" ? t[1].toString() : t[1].replace(/px/, \"\"), c = e.indexOf(\"%\") == -1 ? e + \" + (t = \" + u + \" ? \" + u + \" : \" + a + ') + \"px\"' : parseInt(e.replace(/%/, \"\")) + \" * ((\" + w + \" || \" + h + \") / 100) + (t = \" + u + \" ? \" + u + \" : \" + a + ') + \"px\"')) : (l = \"(\" + y + \" || \" + s + \") / 2 - (this.offsetHeight / 2) + (t = \" + f + \" ? \" + f + \" : \" + v + ') + \"px\"', c = \"(\" + w + \" || \" + h + \") / 2 - (this.offsetWidth / 2) + (t = \" + u + \" ? \" + u + \" : \" + a + ') + \"px\"'), r.removeExpression(\"top\"), r.removeExpression(\"left\"), r.setExpression(\"top\", l), r.setExpression(\"left\", c));\n        }\n      });\n    },\n    focus: function focus(t) {\n      var r = this,\n          u = t || \"first\",\n          i = n(\":input:enabled:visible:\" + u, r.d.wrap);\n      i.length > 0 ? i.focus() : r.d.wrap.focus();\n    },\n    getDimensions: function getDimensions() {\n      var t = n(window),\n          i = n.browser.opera && n.browser.version > \"9.5\" && n.fn.jquery <= \"1.2.6\" ? document.documentElement.clientHeight : n.browser.opera && n.browser.version < \"9.5\" && n.fn.jquery > \"1.2.6\" ? window.innerHeight : t.height();\n      return [i, t.width()];\n    },\n    getVal: function getVal(n) {\n      return n == \"auto\" ? 0 : n.indexOf(\"%\") > 0 ? n : parseInt(n.replace(/px/, \"\"));\n    },\n    setContainerDimensions: function setContainerDimensions(i) {\n      var r = this;\n\n      if (!i || i && r.o.autoResize) {\n        var f = n.browser.opera ? r.d.container.height() : r.getVal(r.d.container.css(\"height\")),\n            u = n.browser.opera ? r.d.container.width() : r.getVal(r.d.container.css(\"width\")),\n            s = r.d.data.outerHeight(!0),\n            h = r.d.data.outerWidth(!0),\n            e = r.o.maxHeight && r.o.maxHeight < t[0] ? r.o.maxHeight : t[0],\n            o = r.o.maxWidth && r.o.maxWidth < t[1] ? r.o.maxWidth : t[1];\n        f = f ? f > e ? e : f : s ? s > e ? e : s < r.o.minHeight ? r.o.minHeight : s : r.o.minHeight, u = u ? u > o ? o : u : h ? h > o ? o : h < r.o.minWidth ? r.o.minWidth : h : r.o.minWidth, r.d.container.css({\n          height: f,\n          width: u\n        });\n      }\n\n      r.o.autoPosition && r.setPosition();\n    },\n    setPosition: function setPosition() {\n      var n = this,\n          r,\n          i,\n          f = t[0] / 2 - n.d.container.outerHeight(!0) / 2,\n          u = t[1] / 2 - n.d.container.outerWidth(!0) / 2;\n      n.o.position && Object.prototype.toString.call(n.o.position) === \"[object Array]\" ? (r = n.o.position[0] || f, i = n.o.position[1] || u) : (r = f, i = u), n.d.container.css({\n        left: i,\n        top: r\n      });\n    },\n    watchTab: function watchTab(t) {\n      var i = this,\n          r;\n      n(t.target).parents(\".simplemodal-container\").length > 0 ? (i.inputs = n(\":input:enabled:visible:first, :input:enabled:visible:last\", i.d.data[0]), (!t.shiftKey && t.target == i.inputs[i.inputs.length - 1] || t.shiftKey && t.target == i.inputs[0] || i.inputs.length == 0) && (t.preventDefault(), r = t.shiftKey ? \"last\" : \"first\", setTimeout(function () {\n        i.focus(r);\n      }, 10))) : (t.preventDefault(), setTimeout(function () {\n        i.focus();\n      }, 10));\n    },\n    open: function open() {\n      var t = this;\n      t.d.iframe && t.d.iframe.show(), n.isFunction(t.o.onOpen) ? t.o.onOpen.apply(t, [t.d]) : (t.d.overlay.show(), t.d.container.show(), t.d.data.show()), t.focus(), t.bindEvents();\n    },\n    close: function close() {\n      var t = this,\n          i;\n      if (!t.d.data) return !1;\n      t.unbindEvents(), n.isFunction(t.o.onClose) && !t.occb ? (t.occb = !0, t.o.onClose.apply(t, [t.d])) : (t.d.placeholder ? (i = n(\"#simplemodal-placeholder\"), t.o.persist ? i.replaceWith(t.d.data.removeClass(\"simplemodal-data\").css(\"display\", t.display)) : (t.d.data.hide().remove(), i.replaceWith(t.d.orig))) : t.d.data.hide().remove(), t.d.container.hide().remove(), t.d.overlay.hide().remove(), t.d.iframe && t.d.iframe.hide().remove(), t.d = {});\n    }\n  };\n})(jQuery);\n\n; /// jquery.tipsy.js\n\n(function (n) {\n  n.fn.tipsy = function (t) {\n    return t = n.extend({}, n.fn.tipsy.defaults, t), this.each(function () {\n      var i = n.fn.tipsy.elementOptions(this, t);\n      n(this).hover(function () {\n        var t, e, r;\n        n.data(this, \"cancel.tipsy\", !0), t = n.data(this, \"active.tipsy\"), t || (t = n('<div class=\"tipsy\"><div class=\"tipsy-inner\"/></div>'), t.css({\n          position: \"absolute\",\n          zIndex: 999999\n        }), n.data(this, \"active.tipsy\", t)), (n(this).attr(\"title\") || typeof n(this).attr(\"original-title\") != \"string\") && n(this).attr(\"original-title\", n(this).attr(\"title\") || \"\").removeAttr(\"title\"), typeof i.title == \"string\" ? e = n(this).attr(i.title == \"title\" ? \"original-title\" : i.title) : typeof i.title == \"function\" && (e = i.title.call(this)), t.find(\".tipsy-inner\")[i.html ? \"html\" : \"text\"](e || i.fallback), r = n.extend({}, n(this).offset(), {\n          width: this.offsetWidth,\n          height: this.offsetHeight\n        }), t.get(0).className = \"tipsy\", t.remove().css({\n          top: 0,\n          left: 0,\n          visibility: \"hidden\",\n          display: \"block\"\n        }).appendTo(document.body);\n        var f = t[0].offsetWidth,\n            u = t[0].offsetHeight,\n            o = typeof i.gravity == \"function\" ? i.gravity.call(this) : i.gravity;\n\n        switch (o.charAt(0)) {\n          case \"n\":\n            t.css({\n              top: r.top + r.height,\n              left: r.left + r.width / 2 - f / 2\n            }).addClass(\"tipsy-north\");\n            break;\n\n          case \"s\":\n            t.css({\n              top: r.top - u,\n              left: r.left + r.width / 2 - f / 2\n            }).addClass(\"tipsy-south\");\n            break;\n\n          case \"e\":\n            t.css({\n              top: r.top + r.height / 2 - u / 2,\n              left: r.left - f\n            }).addClass(\"tipsy-east\");\n            break;\n\n          case \"w\":\n            t.css({\n              top: r.top + r.height / 2 - u / 2,\n              left: r.left + r.width\n            }).addClass(\"tipsy-west\");\n        }\n\n        i.fade ? t.css({\n          opacity: 0,\n          display: \"block\",\n          visibility: \"visible\"\n        }).animate({\n          opacity: .8\n        }) : t.css({\n          visibility: \"visible\"\n        });\n      }, function () {\n        n.data(this, \"cancel.tipsy\", !1);\n        var t = this;\n        setTimeout(function () {\n          if (!n.data(this, \"cancel.tipsy\")) {\n            var r = n.data(t, \"active.tipsy\");\n            i.fade ? r.stop().fadeOut(function () {\n              n(this).remove();\n            }) : r.remove();\n          }\n        }, 100);\n      });\n    });\n  }, n.fn.tipsy.elementOptions = function (t, i) {\n    return n.metadata ? n.extend({}, i, n(t).metadata()) : i;\n  }, n.fn.tipsy.defaults = {\n    fade: !1,\n    fallback: \"\",\n    gravity: \"n\",\n    html: !1,\n    title: \"title\"\n  }, n.fn.tipsy.autoNS = function () {\n    return n(this).offset().top > n(document).scrollTop() + n(window).height() / 2 ? \"s\" : \"n\";\n  }, n.fn.tipsy.autoWE = function () {\n    return n(this).offset().left > n(document).scrollLeft() + n(window).width() / 2 ? \"e\" : \"w\";\n  };\n})(jQuery);\n\n; /// AjaxAvatarThumbnail.js\n\nvar RobloxThumbs = function () {\n  function n(t, i, r) {\n    $.get(\"/thumbs/rawavatar.ashx\", {\n      UserID: i,\n      ThumbnailFormatID: r\n    }, function (u) {\n      u == \"PENDING\" ? window.setTimeout(function () {\n        n(t, i, r);\n      }, 3e3) : u.substring(5, 0) == \"ERROR\" || $(\"#\" + t).attr(\"src\", u);\n    });\n  }\n\n  return {\n    GenerateAvatarThumb: function GenerateAvatarThumb(t, i, r) {\n      $(\"#\" + t).attr(\"src\", \"/images/spinners/waiting.gif\"), n(t, i, r);\n    }\n  };\n}();\n\n; /// extensions/string.js\n\n$.extend(String.prototype, function () {\n  function n() {\n    return this.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n  }\n\n  return {\n    escapeHTML: n\n  };\n}());\n; /// StringTruncator.min.js\n\nfunction InitStringTruncator() {\n  isInitialized || (fitStringSpan = document.createElement(\"span\"), fitStringSpan.style.display = \"inline\", fitStringSpan.style.visibility = \"hidden\", fitStringSpan.style.padding = \"0px\", document.body.appendChild(fitStringSpan), isInitialized = !0);\n}\n\nfunction fitStringToWidth(n, t, i) {\n  function f(n) {\n    return n.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n  }\n\n  if (isInitialized || InitStringTruncator(), i && (fitStringSpan.className = i), i = f(n), fitStringSpan.innerHTML = i, fitStringSpan.offsetWidth > t) {\n    for (var i = 0, r, u = n.length; r = u - i >> 1;) {\n      r = i + r, fitStringSpan.innerHTML = f(n.substring(0, r)) + \"&hellip;\", fitStringSpan.offsetWidth > t ? u = r : i = r;\n    }\n\n    i = n.substring(0, i) + \"&hellip;\";\n  }\n\n  return i;\n}\n\nfunction fitStringToWidthSafe(n, t, i) {\n  return n = fitStringToWidth(n, t, i), n.indexOf(\"&hellip;\") != -1 && (t = n.lastIndexOf(\" \"), t != -1 && t + 10 <= n.length && (n = n.substring(0, t + 2) + \"&hellip;\")), n;\n}\n\nvar isInitialized = !1,\n    fitStringSpan = null;\n; /// json2.min.js\n\nvar JSON;\nJSON || (JSON = {}), function () {\n  \"use strict\";\n\n  function i(n) {\n    return n < 10 ? \"0\" + n : n;\n  }\n\n  function f(n) {\n    return o.lastIndex = 0, o.test(n) ? '\"' + n.replace(o, function (n) {\n      var t = s[n];\n      return typeof t == \"string\" ? t : \"\\\\u\" + (\"0000\" + n.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + n + '\"';\n  }\n\n  function r(i, e) {\n    var c,\n        l,\n        h,\n        a,\n        v = n,\n        s,\n        o = e[i];\n    o && _typeof(o) == \"object\" && typeof o.toJSON == \"function\" && (o = o.toJSON(i)), typeof t == \"function\" && (o = t.call(e, i, o));\n\n    switch (_typeof(o)) {\n      case \"string\":\n        return f(o);\n\n      case \"number\":\n        return isFinite(o) ? String(o) : \"null\";\n\n      case \"boolean\":\n      case \"null\":\n        return String(o);\n\n      case \"object\":\n        if (!o) return \"null\";\n\n        if (n += u, s = [], Object.prototype.toString.apply(o) === \"[object Array]\") {\n          for (a = o.length, c = 0; c < a; c += 1) {\n            s[c] = r(c, o) || \"null\";\n          }\n\n          return h = s.length === 0 ? \"[]\" : n ? \"[\\n\" + n + s.join(\",\\n\" + n) + \"\\n\" + v + \"]\" : \"[\" + s.join(\",\") + \"]\", n = v, h;\n        }\n\n        if (t && _typeof(t) == \"object\") for (a = t.length, c = 0; c < a; c += 1) {\n          l = t[c], typeof l == \"string\" && (h = r(l, o), h && s.push(f(l) + (n ? \": \" : \":\") + h));\n        } else for (l in o) {\n          Object.hasOwnProperty.call(o, l) && (h = r(l, o), h && s.push(f(l) + (n ? \": \" : \":\") + h));\n        }\n        return h = s.length === 0 ? \"{}\" : n ? \"{\\n\" + n + s.join(\",\\n\" + n) + \"\\n\" + v + \"}\" : \"{\" + s.join(\",\") + \"}\", n = v, h;\n    }\n  }\n\n  typeof Date.prototype.toJSON != \"function\" && (Date.prototype.toJSON = function () {\n    return isFinite(this.valueOf()) ? this.getUTCFullYear() + \"-\" + i(this.getUTCMonth() + 1) + \"-\" + i(this.getUTCDate()) + \"T\" + i(this.getUTCHours()) + \":\" + i(this.getUTCMinutes()) + \":\" + i(this.getUTCSeconds()) + \"Z\" : null;\n  }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {\n    return this.valueOf();\n  });\n  var e = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      o = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      n,\n      u,\n      s = {\n    \"\\b\": \"\\\\b\",\n    \"\\t\": \"\\\\t\",\n    \"\\n\": \"\\\\n\",\n    \"\\f\": \"\\\\f\",\n    \"\\r\": \"\\\\r\",\n    '\"': '\\\\\"',\n    \"\\\\\": \"\\\\\\\\\"\n  },\n      t;\n  typeof JSON.stringify != \"function\" && (JSON.stringify = function (i, f, e) {\n    var o;\n    if (n = \"\", u = \"\", typeof e == \"number\") for (o = 0; o < e; o += 1) {\n      u += \" \";\n    } else typeof e == \"string\" && (u = e);\n    if (t = f, f && typeof f != \"function\" && (_typeof(f) != \"object\" || typeof f.length != \"number\")) throw new Error(\"JSON.stringify\");\n    return r(\"\", {\n      \"\": i\n    });\n  }), typeof JSON.parse != \"function\" && (JSON.parse = function (n, t) {\n    function r(n, i) {\n      var f,\n          e,\n          u = n[i];\n      if (u && _typeof(u) == \"object\") for (f in u) {\n        Object.hasOwnProperty.call(u, f) && (e = r(u, f), e !== undefined ? u[f] = e : delete u[f]);\n      }\n      return t.call(n, i, u);\n    }\n\n    var i;\n    if (n = String(n), e.lastIndex = 0, e.test(n) && (n = n.replace(e, function (n) {\n      return \"\\\\u\" + (\"0000\" + n.charCodeAt(0).toString(16)).slice(-4);\n    })), /^[\\],:{}\\s]*$/.test(n.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, \"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\"))) return i = eval(\"(\" + n + \")\"), typeof t == \"function\" ? r({\n      \"\": i\n    }, \"\") : i;\n    throw new SyntaxError(\"JSON.parse\");\n  });\n}();\n; /// webkit.js\n\ntypeof Sys.Browser.WebKit == \"undefined\" && (Sys.Browser.WebKit = {}), navigator.userAgent.indexOf(\"WebKit/\") > -1 && (Sys.Browser.agent = Sys.Browser.WebKit, Sys.Browser.version = parseFloat(navigator.userAgent.match(/WebKit\\/(\\d+(\\.\\d+)?)/)[1]), Sys.Browser.name = \"WebKit\");\n; /// GoogleAnalytics/GoogleAnalyticsEvents.js\n\nvar GoogleAnalyticsEvents = new function () {\n  this.FireEvent = function (n) {\n    if ((typeof _gaq === \"undefined\" ? \"undefined\" : _typeof(_gaq)) != ( true ? \"undefined\" : 0)) {\n      var i = [\"_trackEvent\"],\n          t = [\"b._trackEvent\"];\n      _gaq.push(i.concat(n)), _gaq.push(t.concat(n));\n    }\n  };\n}();\n; /// MasterPageUI.js\n\n$(function () {\n  $(\".tooltip\").tipsy(), $(\".tooltip-top\").tipsy({\n    gravity: \"s\"\n  }), $(\".tooltip-right\").tipsy({\n    gravity: \"w\"\n  }), $(\".tooltip-left\").tipsy({\n    gravity: \"e\"\n  }), $(\".tooltip-bottom\").tipsy({\n    gravity: \"n\"\n  });\n}), typeof Roblox == \"undefined\" && (Roblox = {}), Roblox.FixedUI = function () {\n  function s() {\n    if (typeof pageYOffset != \"undefined\") return pageYOffset;\n    var t = document.body,\n        n = document.documentElement;\n    return n = n.clientHeight ? n : t, n.scrollTop;\n  }\n\n  function e() {\n    var n = s();\n    t || (t = $(\"iframe.IframeAdHide\")), t.each(function () {\n      var t = $(this).offset().top - 73;\n      !r.gutterAdsEnabled && n >= t ? $(this).css(\"visibility\", \"hidden\") : $(this).css(\"visibility\", \"visible\");\n    });\n  }\n\n  function i() {\n    $(\"#Nav\").css(\"cssText\", \"position: static !important;width:970px !important\"), $(\"#SmallHeaderContainer\").css(\"cssText\", \"position: relative !important;height: 36px !important;width:970px !important\"), $(\".forceSpace\").css(\"cssText\", \"width: 970px !important; height:9px !important;padding-top: 0px !important;background:white\"), $(\"#Container\").css(\"cssText\", \"width: 970px !important\"), $(\".mySubmenuFixed\").css(\"cssText\", \"position: relative; top: 0px;\"), $(\"#MasterContainer\").css(\"cssText\", \"width: 970px !important\"), $(\".mySubmenuFixed\").length == 1 && ($(\".forceSpaceUnderSubmenu\").hide(), $(\".forceSpace\").css(\"cssText\", \"width: 910px !important; height:7px !important;padding-top: 0px !important;\")), $(window).unbind(\"scroll\");\n  }\n\n  function h() {\n    $(\"#Nav\").css(\"cssText\", \"position: fixed !important;width:100% !important\"), $(\"#SmallHeaderContainer\").css(\"cssText\", \"position: fixed !important;height: 40px !important;width:100% !important\"), $(\".forceSpace\").css(\"cssText\", \"width: 100% !important; height:15px !important;padding-top: 62px !important;\"), $(\"#Container\").css(\"cssText\", \"width: 100% !important\"), $(\".mySubmenuFixed\").css(\"cssText\", \"position: fixed; top: 68px;\"), $(\"#MasterContainer\").css(\"cssText\", \"width: 100%\"), $(\".mySubmenuFixed\").length == 1 && $(\".forceSpaceUnderSubmenu\").show(), $(window).scroll(e);\n  }\n\n  function o() {\n    var n = 1024;\n    return document.body && document.body.offsetWidth && (n = document.body.offsetWidth), window.innerWidth && window.innerHeight && (n = window.innerWidth), n;\n  }\n\n  function u() {\n    o() < 978 ? i() : h();\n  }\n\n  var n = navigator.userAgent.toLowerCase(),\n      f = /mobile/i.test(n) || /ipad/i.test(n) || /iphone/i.test(n) || /android/i.test(n) || /playbook/i.test(n) || /blackberry/i.test(n),\n      t,\n      r;\n  return $(function () {\n    f ? i() : $(window).load(u).resize(u);\n  }), t = null, r = {\n    isMobile: f,\n    gutterAdsEnabled: !1,\n    unfixHeader: i\n  };\n}();\n; /// jquery.cookie.js\n\njQuery.cookie = function (n, t, i) {\n  var o, r, f, e, u, s;\n\n  if (typeof t != \"undefined\") {\n    i = i || {}, t === null && (t = \"\", i.expires = -1), o = \"\", i.expires && (typeof i.expires == \"number\" || i.expires.toUTCString) && (typeof i.expires == \"number\" ? (r = new Date(), r.setTime(r.getTime() + i.expires * 864e5)) : r = i.expires, o = \"; expires=\" + r.toUTCString());\n    var h = i.path ? \"; path=\" + i.path : \"\",\n        c = i.domain ? \"; domain=\" + i.domain : \"\",\n        l = i.secure ? \"; secure\" : \"\";\n    document.cookie = [n, \"=\", encodeURIComponent(t), o, h, c, l].join(\"\");\n  } else {\n    if (f = null, document.cookie && document.cookie != \"\") for (e = document.cookie.split(\";\"), u = 0; u < e.length; u++) {\n      if (s = jQuery.trim(e[u]), s.substring(0, n.length + 1) == n + \"=\") {\n        f = decodeURIComponent(s.substring(n.length + 1));\n        break;\n      }\n    }\n    return f;\n  }\n};\n\n; /// jquery.jsoncookie.js\n\nfunction RobloxJSONCookie(n) {\n  this._cookiename = n;\n}\n\n(function (n) {\n  var t = function t(n) {\n    return _typeof(n) == \"object\" && !(n instanceof Array) && n !== null;\n  };\n\n  n.extend({\n    getJSONCookie: function getJSONCookie(t, i) {\n      var r = n.cookie(t);\n      return i ? r : r ? JSON.parse(r) : {};\n    },\n    setJSONCookie: function setJSONCookie(i, r, u) {\n      var f = \"\";\n      return u = n.extend({\n        expires: 90,\n        path: \"/\"\n      }, u), f = t(r) ? JSON.stringify(r) : r, n.cookie(i, f, u);\n    },\n    removeJSONCookie: function removeJSONCookie(t) {\n      return n.cookie(t, null);\n    },\n    JSONCookie: function JSONCookie(t, i, r) {\n      return i && n.setJSONCookie(t, i, r), n.getJSONCookie(t);\n    }\n  });\n})(jQuery), RobloxJSONCookie.prototype = {\n  Delete: function Delete() {\n    return $.removeJSONCookie(this._cookiename);\n  },\n  SetObj: function SetObj(n, t) {\n    return t || (t = {\n      path: \"/\"\n    }), $.JSONCookie(this._cookiename, n, t);\n  },\n  SetJSON: function SetJSON(n, t) {\n    return t || (t = {\n      path: \"/\"\n    }), $.JSONCookie(this._cookiename, n, t);\n  },\n  GetObj: function GetObj() {\n    var n = $.getJSONCookie(this._cookiename, !1);\n    return n == null ? {} : n;\n  },\n  GetJSON: function GetJSON() {\n    return $.getJSONCookie(this._cookiename, !0);\n  }\n};\n; /// XsrfToken.js\n\ntypeof Roblox == \"undefined\" && (Roblox = {}), Roblox.XsrfToken = function () {\n  function f(n) {\n    var u, t;\n    if (i.allUrlsEnabled) return !0;\n\n    for (u = n.split(\"?\")[0].toLowerCase(), t = 0; t < r.length; t++) {\n      if (r[t] === u) return !0;\n    }\n\n    return !1;\n  }\n\n  function e(n) {\n    r.push(n.toLowerCase());\n  }\n\n  function o(t) {\n    n = t;\n  }\n\n  function u() {\n    return n;\n  }\n\n  var n = \"\",\n      t = /(^|\\?|&)token=[^&]*/,\n      r = [\"/chat/friendhandler.ashx\", \"/chat/party.ashx\", \"/chat/send.ashx\", \"/chat/utility.ashx\", \"/groups/rolesetupdater.ashx\", \"groups.aspx/exileuseranddeleteposts\", \"messageshandler.ashx\", \"emailupgrademe.ashx\", \"/services/usercheck.asmx/updatepersonalinfo\", \"/thumbs/assetmedia/placemediaitemsorthandler.ashx\"],\n      i;\n  return $.ajaxPrefilter(function (i) {\n    var o, e;\n    i.dataType != \"jsonp\" && i.dataType != \"script\" && n != \"\" && f(i.url) && (o = $.param({\n      token: n\n    }), t.test(i.url) || typeof i.data != \"undefined\" && t.test(i.data) || (i.url += /\\?/.test(i.url) ? \"&token=\" + encodeURIComponent(n) : \"?token=\" + encodeURIComponent(n)), e = i.error, i.error = function (r, u, f) {\n      if (r.status == 420) {\n        var o = r.getResponseHeader(\"Token\");\n\n        if (o == null) {\n          typeof e == \"function\" && e(r, u, f);\n          throw new Error(\"Null token returned by Xsrf enabled handler\");\n        }\n\n        t.test(i.url) ? i.url = i.url.replace(t, \"$1token=\" + encodeURIComponent(o)) : i.data = i.data.replace(t, \"$1token=\" + encodeURIComponent(o)), $.ajax(i), n = o;\n      } else typeof e == \"function\" && e(r, u, f);\n    });\n  }), i = {\n    setToken: o,\n    getToken: u,\n    allUrlsEnabled: !1,\n    addEnabledUrl: e\n  };\n}();\n; /// RobloxEventManager.js\n\nfunction RBXBaseEventListener() {\n  if (!(this instanceof RBXBaseEventListener)) return new RBXBaseEventListener();\n  this.init = function () {\n    for (eventKey in this.events) {\n      $(document).bind(this.events[eventKey], $.proxy(this.localCopy, this));\n    }\n  }, this.events = [], this.localCopy = function (n, t) {\n    var r = $.extend(!0, {}, n),\n        i = $.extend(!0, {}, t);\n    this.handleEvent(r, i);\n  }, this.distillData = function () {\n    return console.log(\"RBXEventListener distillData - Please implement me\"), !1;\n  }, this.handleEvent = function () {\n    return console.log(\"EventListener handleEvent - Please implement me\"), !1;\n  }, this.fireEvent = function () {\n    return console.log(\"EventListener fireEvent - Please implement me\"), !1;\n  };\n}\n\nRobloxEventManager = new function () {\n  function u(n) {\n    var i = new RegExp(n + \"=([^;]*)\"),\n        t = i.exec(document.cookie);\n    return t ? t[1] : null;\n  }\n\n  function t(n) {\n    for (var u = {}, r = n.split(\"&\"), i, t = 0; t < r.length; t++) {\n      i = r[t].split(\"=\"), u[i[0]] = i[1];\n    }\n\n    return u;\n  }\n\n  function i(n) {\n    var i = u(n);\n    return i ? t(i) : null;\n  }\n\n  var n = [],\n      r = {};\n  this.enabled = !1, this.initialized = !1, this.eventQueue = [], this.initialize = function (n) {\n    for (this.initialized = !0, this.enabled = n; this.eventQueue.length > 0;) {\n      var t = this.eventQueue.pop();\n      this.triggerEvent(t.eventName, t.args);\n    }\n  }, this.getMarketingGuid = function () {\n    var n = i(\"RBXEventTracker\");\n    return n != null ? n.browserid : -1;\n  }, this.triggerEvent = function (n, t) {\n    this.initialized ? this.enabled && (typeof t == \"undefined\" && (t = {}), t.guid = this.getMarketingGuid(), t.guid != -1 && $(document).trigger(n, [t])) : this.eventQueue.push({\n      eventName: n,\n      args: t\n    });\n  }, this.registerCookieStoreEvent = function (t) {\n    n.push(t);\n  }, this.insertDataStoreKeyValuePair = function (n, t) {\n    r[n] = t;\n  }, this.monitorCookieStore = function () {\n    var i, u, f, t, r;\n\n    try {\n      if (typeof Roblox == \"undefined\" || typeof Roblox.Client == \"undefined\" || window.location.protocol == \"https:\") return;\n      if (i = Roblox.Client.CreateLauncher(!1), i == null) return;\n\n      for (u = 0; u < n.length; u++) {\n        try {\n          f = n[u], t = i.GetKeyValue(f), t != \"\" && t != \"-1\" && t != \"RBX_NOT_VALID\" && (r = eval(\"(\" + t + \")\"), r.userType = r.userId > 0 ? \"user\" : \"guest\", RobloxEventManager.triggerEvent(f, r), i.SetKeyValue(f, \"RBX_NOT_VALID\"));\n        } catch (e) {}\n      }\n\n      Roblox.Client.ReleaseLauncher(i, !1, !1);\n    } catch (e) {}\n  };\n}();\n; /// RobloxEventListener.js\n\nRobloxListener = new RBXBaseEventListener(), RobloxListener.handleEvent = function (n, t) {\n  var r, u, i;\n\n  switch (n.type) {\n    case \"rbx_evt_install_begin\":\n      i = {\n        guid: \"guid\",\n        userId: \"userid\"\n      }, r = n.type;\n      break;\n\n    case \"rbx_evt_initial_install_start\":\n      i = {\n        guid: \"guid\",\n        userId: \"userid\"\n      }, r = n.type;\n      break;\n\n    case \"rbx_evt_ftp\":\n      i = {\n        guid: \"guid\",\n        userId: \"userid\"\n      }, r = n.type;\n      break;\n\n    case \"rbx_evt_initial_install_success\":\n      i = {\n        guid: \"guid\",\n        userId: \"userid\"\n      }, r = n.type;\n      break;\n\n    case \"rbx_evt_fmp\":\n      i = {\n        guid: \"guid\",\n        userId: \"userid\"\n      }, r = n.type;\n      break;\n\n    default:\n      return console.log(\"RobloxEventListener - Event registered without handling instructions: \" + n.type), !1;\n  }\n\n  return u = this.distillData(t, i), this.fireEvent(this.eventToString(r, u)), !0;\n}, RobloxListener.distillData = function (n, t) {\n  var i = {};\n\n  for (dataKey in t) {\n    _typeof(n[dataKey]) != ( true ? \"undefined\" : 0) && (i[t[dataKey]] = encodeURIComponent(n[dataKey]));\n  }\n\n  return i;\n}, RobloxListener.eventToString = function (n, t) {\n  var i = RobloxListener.restUrl;\n  if (i += \"?event=\" + n + \"&\", t != null) for (arg in t) {\n    (typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg)) != ( true ? \"undefined\" : 0) && t.hasOwnProperty(arg) && (i += arg + \"=\" + t[arg] + \"&\");\n  }\n  return i = i.slice(0, i.length - 1);\n}, RobloxListener.fireEvent = function (n) {\n  var t = $('<img width=\"1\" height=\"1\" src=\"' + n + '\"/>');\n}, RobloxListener.events = [\"rbx_evt_install_begin\", \"rbx_evt_initial_install_start\", \"rbx_evt_ftp\", \"rbx_evt_initial_install_success\", \"rbx_evt_fmp\"];\n; /// KontagentEventListener.js\n\nKontagentListener = new RBXBaseEventListener(), KontagentListener.restUrl = \"\", KontagentListener.APIKey = \"\", KontagentListener.StagingAPIKey = \"\", KontagentListener.StagingEvents = [], KontagentListener.handleEvent = function (n, t) {\n  function f(n) {\n    return n = n.toLowerCase(), n == \"win32\" ? n = \"Windows\" : n == \"osx\" && (n = \"Mac\"), n;\n  }\n\n  var r, u, i, o, e;\n  r = \"evt\";\n\n  switch (n.type) {\n    case \"rbx_evt_pageview\":\n      i = {\n        guid: \"s\",\n        path: \"u\",\n        ts: \"ts\",\n        user_ip: \"ip\"\n      }, r = \"pgr\";\n      break;\n\n    case \"rbx_evt_userinfo\":\n      i = {\n        guid: \"s\",\n        age: \"b\",\n        gender: \"g\"\n      }, r = \"cpu\";\n      break;\n\n    case \"rbx_evt_ecomm_item\":\n      t.total = Math.round(t.total * 100), t.productName = t.productName.replace(/\\s/g, \"\").replace(\"Outrageous\", \"O\").replace(\"Turbo\", \"T\").replace(\"Builders\", \"B\").replace(\"Club\", \"C\"), i = {\n        guid: \"s\",\n        total: \"v\",\n        provider: \"st1\",\n        category: \"st2\",\n        productName: \"st3\",\n        type: \"tu\"\n      }, r = \"mtu\";\n      break;\n\n    case \"rbx_evt_ftp\":\n      t.tracking = \"\", t.shorttracking = \"\", i = {\n        guid: \"s\",\n        trackingtag: \"u\",\n        shorttracking: \"su\"\n      }, u = this.distillData(t, i), r = \"apa\", this.fireEvent(this.eventToString(n.type, r, u)), t.eventName = \"Install Success Funnel\", t.eventType = \"Install Success Funnel\", t.os = f(t.os), i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        eventName: \"n\"\n      }, u = this.distillData(t, i), r = \"evt\", this.fireEvent(this.eventToString(n.type, r, u)), t.eventType = \"Install Success Place\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        placeId: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_initial_install_success\":\n      t.tracking = \"\", t.shorttracking = \"\", i = {\n        guid: \"s\",\n        trackingtag: \"u\",\n        shorttracking: \"su\"\n      }, u = this.distillData(t, i), r = \"apa\", this.fireEvent(this.eventToString(n.type, r, u)), t.eventName = \"Bootstrapper Install Success Funnel\", t.eventType = \"Bootstrapper Install Success Funnel\", t.os = f(t.os), i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        eventName: \"n\"\n      }, u = this.distillData(t, i), r = \"evt\", this.fireEvent(this.eventToString(n.type, r, u)), t.eventType = \"Bootstrapper Install Success Place\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        placeId: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_install_begin\":\n      t.eventName = \"Install Begin\", t.eventType = \"Install Begin\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_initial_install_start\":\n      t.eventName = \"Bootstrapper Install Begin\", t.eventType = \"Bootstrapper Install Begin\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_fmp\":\n      t.eventName = \"Five Minute Play Funnel\", t.eventType = \"Five Minute Play Funnel\", t.os = f(t.os), i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        eventName: \"n\"\n      }, u = this.distillData(t, i), this.fireEvent(this.eventToString(n.type, r, u)), t.eventType = \"Five Minute Play Place\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        os: \"st2\",\n        userType: \"st3\",\n        placeId: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_play_user\":\n      t.eventName = \"Play User\", t.eventType = \"Play User\", t.gender = t.gender, i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        gender: \"st2\",\n        age: \"st3\",\n        placeId: \"l\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_play_guest\":\n      t.eventName = \"Play Guest\", t.eventType = \"Play Guest\", t.gender = t.gender, i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        gender: \"st2\",\n        placeId: \"l\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_signup\":\n      t.eventName = \"Sign Up Funnel\", t.eventType = \"Sign Up Funnel\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        eventName: \"n\"\n      }, u = this.distillData(t, i), r = \"evt\", this.fireEvent(this.eventToString(n.type, r, u)), t.eventName = \"Sign Up\", t.eventType = \"Sign Up\", t.gender = t.gender, i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        gender: \"st2\",\n        age: \"st3\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_ecomm_custom\":\n      t.eventType = \"Purchase\", t.productName = t.productName.replace(/\\s/g, \"\").replace(\"Outrageous\", \"O\").replace(\"Turbo\", \"T\").replace(\"Builders\", \"B\").replace(\"Club\", \"C\"), i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        provider: \"st2\",\n        category: \"st3\",\n        productName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_abtest\":\n      i = {\n        guid: \"s\",\n        experiment: \"st1\",\n        variation: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_pageview_custom\":\n      t.eventName = t.page, i = typeof t.userType == \"undefined\" ? {\n        guid: \"s\",\n        page: \"st1\",\n        eventName: \"n\"\n      } : {\n        guid: \"s\",\n        page: \"st1\",\n        userType: \"st2\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_generic\":\n      t.eventName = t.type, i = {\n        guid: \"s\",\n        type: \"st1\",\n        eventName: \"n\"\n      }, typeof t.opt1 != \"undefined\" && (i.opt1 = \"st2\"), typeof t.opt2 != \"undefined\" && typeof t.opt1 != \"undefined\" && (i.opt2 = \"st3\");\n      break;\n\n    case \"rbx_evt_source_tracking\":\n      t.installed = 0, t.sourceType = \"ad\", i = {\n        guid: \"s\",\n        sourceType: \"tu\",\n        installed: \"i\",\n        source: \"st1\",\n        campaign: \"st2\",\n        medium: \"st3\"\n      }, r = \"ucc\";\n      break;\n\n    case \"rbx_evt_card_redemption\":\n      t.eventType = \"CardRedemption\", t.eventName = \"CardRedemption\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        merchant: \"st2\",\n        cardValue: \"st3\",\n        eventName: \"n\"\n      };\n      break;\n\n    case \"rbx_evt_popup_action\":\n      t.eventType = \"GuestPlayPopupAction\", t.eventName = \"GuestPlayPopupAction\", i = {\n        guid: \"s\",\n        eventType: \"st1\",\n        action: \"st2\",\n        eventName: \"n\"\n      };\n      break;\n\n    default:\n      return console.log(\"KontagentListener - Event registered without handling instructions: \" + n.type), !1;\n  }\n\n  return u = this.distillData(t, i), this.fireEvent(this.eventToString(n.type, r, u)), !0;\n}, KontagentListener.distillData = function (n, t) {\n  var i = {};\n\n  for (dataKey in t) {\n    _typeof(n[dataKey]) != ( true ? \"undefined\" : 0) && (i[t[dataKey]] = encodeURIComponent(n[dataKey]));\n  }\n\n  return i;\n}, KontagentListener.eventToString = function (n, t, i) {\n  var r = KontagentListener.restUrl,\n      u = this.isStagingEvent(n, i) ? KontagentListener.StagingAPIKey : KontagentListener.APIKey;\n  if (r += u + \"/\" + t + \"/?\", i != null) for (arg in i) {\n    (typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg)) != ( true ? \"undefined\" : 0) && i.hasOwnProperty(arg) && (r += arg + \"=\" + i[arg] + \"&\");\n  }\n  return r = r.slice(0, r.length - 1);\n}, KontagentListener.isStagingEvent = function (n, t) {\n  var r, i;\n  staging = !1;\n\n  try {\n    for (r in this.StagingEvents) {\n      if (i = this.StagingEvents[r], typeof i == \"string\") {\n        if (n == i) {\n          staging = !0;\n          break;\n        }\n      } else if (_typeof(i) == \"object\" && typeof i[n] != \"undefined\" && i[n] == t.st1) {\n        staging = !0;\n        break;\n      }\n    }\n  } catch (u) {}\n\n  return staging;\n}, KontagentListener.fireEvent = function (n) {\n  var t = $('<img width=\"1\" height=\"1\" src=\"' + n + '\"/>');\n}, KontagentListener.events = [\"rbx_evt_pageview\", \"rbx_evt_install_begin\", \"rbx_evt_initial_install_start\", \"rbx_evt_ftp\", \"rbx_evt_initial_install_success\", \"rbx_evt_fmp\", \"rbx_evt_play_user\", \"rbx_evt_play_guest\", \"rbx_evt_signup\", \"rbx_evt_ecomm_item\", \"rbx_evt_ecomm_custom\", \"rbx_evt_userinfo\", \"rbx_evt_abtest\", \"rbx_evt_pageview_custom\", \"rbx_evt_generic\", \"rbx_evt_source_tracking\", \"rbx_evt_card_redemption\", \"rbx_evt_popup_action\"];\n; /// GoogleEventListener.js\n\nGoogleListener = new RBXBaseEventListener(), GoogleListener.handleEvent = function (n, t) {\n  function r(n) {\n    return n = n.toLowerCase(), n == \"win32\" ? n = \"Windows\" : n == \"osx\" && (n = \"Mac\"), n;\n  }\n\n  var f, u, i;\n\n  switch (n.type) {\n    case \"rbx_evt_initial_install_begin\":\n      t.os = r(t.os), t.category = \"Bootstrapper Install Begin\", i = {\n        os: \"action\"\n      };\n      break;\n\n    case \"rbx_evt_ftp\":\n      t.os = r(t.os), t.category = \"Install Success\", i = {\n        os: \"action\"\n      };\n      break;\n\n    case \"rbx_evt_initial_install_success\":\n      t.os = r(t.os), t.category = \"Bootstrapper Install Success\", i = {\n        os: \"action\"\n      };\n      break;\n\n    case \"rbx_evt_fmp\":\n      t.os = r(t.os), t.category = \"Five Minute Play\", i = {\n        os: \"action\"\n      };\n      break;\n\n    case \"rbx_evt_abtest\":\n      i = {\n        experiment: \"category\",\n        variation: \"action\",\n        version: \"opt_label\"\n      };\n      break;\n\n    case \"rbx_evt_card_redemption\":\n      t.category = \"CardRedemption\", i = {\n        merchant: \"action\",\n        cardValue: \"opt_label\"\n      };\n      break;\n\n    default:\n      return console.log(\"GoogleListener - Event registered without handling instructions: \" + n.type), !1;\n  }\n\n  return i.category = \"category\", u = this.distillData(t, i), this.fireEvent(u), !0;\n}, GoogleListener.distillData = function (n, t) {\n  var i = {},\n      r;\n\n  for (dataKey in t) {\n    _typeof(n[dataKey]) != ( true ? \"undefined\" : 0) && (i[t[dataKey]] = n[dataKey]);\n  }\n\n  return r = [i.category, i.action], i.opt_label != null && (r = r.concat(i.opt_label)), i.opt_value != null && (r = r.concat(i.opt_value)), r;\n}, GoogleListener.fireEvent = function (n) {\n  if ((typeof _gaq === \"undefined\" ? \"undefined\" : _typeof(_gaq)) != ( true ? \"undefined\" : 0)) {\n    var i = [\"_trackEvent\"],\n        t = [\"b._trackEvent\"];\n    _gaq.push(i.concat(n)), _gaq.push(t.concat(n));\n  }\n}, GoogleListener.events = [\"rbx_evt_initial_install_begin\", \"rbx_evt_ftp\", \"rbx_evt_initial_install_success\", \"rbx_evt_fmp\", \"rbx_evt_abtest\", \"rbx_evt_card_redemption\"];\n; /// MongoEventListener.js\n\nMongoListener = new RBXBaseEventListener(), MongoListener.handleEvent = function (n, t) {\n  var i;\n  return i = typeof t.shard == \"undefined\" ? this.defaultShard : t.shard, typeof t.eventName == \"undefined\" && (t.eventName = n.type), t.eventName === \"JavascriptExceptionLoggingEvent\" ? dataMap = {\n    category: \"category\",\n    url: \"url\",\n    msg: \"msg\",\n    line: \"line\",\n    ua: \"UA\"\n  } : (typeof t.category == \"undefined\" && (t.category = MongoListener.getCategoryFromEventName(t.eventName)), t.userId = MongoListener.userId, t.ip = MongoListener.clientIpAddress, dataMap = {\n    guid: \"guid\",\n    category: \"category\",\n    userId: \"userid\",\n    ip: \"ip\"\n  }), this.fireEvent(i, this.distillData(t, dataMap)), !0;\n}, MongoListener.getCategoryFromEventName = function (n) {\n  switch (n) {\n    case \"rbx_evt_sitetouch\":\n      return \"SiteTouch\";\n\n    case \"rbx_evt_fmp\":\n      return \"FiveMinutePlay\";\n\n    case \"rbx_evt_play_user\":\n    case \"rbx_evt_play_guest\":\n      return \"Play\";\n\n    default:\n      return n;\n  }\n}, MongoListener.distillData = function (n, t) {\n  var i = {};\n\n  for (dataKey in t) {\n    _typeof(n[dataKey]) != ( true ? \"undefined\" : 0) && (i[t[dataKey]] = encodeURIComponent(n[dataKey]));\n  }\n\n  return i;\n}, MongoListener.fireEvent = function (n, t) {\n  $.ajax({\n    url: MongoListener.loggingURI + n,\n    dataType: \"jsonp\",\n    jsonpCallback: \"MongoListener.callback\",\n    data: t\n  });\n}, MongoListener.callback = function () {}, MongoListener.events = [\"JavascriptExceptionLoggingEvent\"];\n; /// SearchVisionListener.js\n\nSearchVisionListener = new RBXBaseEventListener(), SearchVisionListener.handleEvent = function (n, t) {\n  var i = null;\n\n  switch (n.type) {\n    case \"rbx_evt_fmp\":\n      i = {\n        esvtk_v: \"1\",\n        esvtk_esvid: \"A40125\",\n        event: \"five_minute_play\"\n      };\n      break;\n\n    case \"rbx_evt_ftp\":\n      i = {\n        esvtk_v: \"1\",\n        esvtk_esvid: \"A40125\",\n        event: \"first_play\"\n      };\n      break;\n\n    case \"rbx_evt_install_begin\":\n      i = {\n        esvtk_v: \"1\",\n        esvtk_esvid: \"A40125\",\n        event: \"download\"\n      };\n      break;\n\n    case \"rbx_evt_signup\":\n      i = {\n        esvtk_v: \"1\",\n        esvtk_esvid: \"A40125\",\n        event: \"esv_signup\"\n      };\n      break;\n\n    case \"rbx_evt_generic\":\n      t.type === \"OneDayReturn\" && (i = {\n        esvtk_v: \"1\",\n        esvtk_esvid: \"A40125\",\n        event: \"return\"\n      });\n  }\n\n  return i !== null && (i.orderid = t.guid, this.fireEvent(i)), !0;\n}, SearchVisionListener.fireEvent = function (n) {\n  typeof esvtk_track != \"undefined\" ? esvtk_track(n) : setTimeout(function () {\n    SearchVisionListener.fireEvent(n);\n  }, 500);\n}, SearchVisionListener.events = [\"rbx_evt_fmp\", \"rbx_evt_ftp\", \"rbx_evt_install_begin\", \"rbx_evt_signup\", \"rbx_evt_generic\"];\n; /// SiteTouchEvent.js\n\ntypeof Roblox == \"undefined\" && (Roblox = {}), Roblox.SiteTouchEvent = function () {\n  function r() {\n    var t, i;\n    return typeof localStorage != \"undefined\" && (t = localStorage.getItem(n)), (typeof t == \"undefined\" || t === null) && (t = $.cookie(n)), i = Date.parse(t), t && !isNaN(i) ? new Date(i) : new Date(0);\n  }\n\n  function i(i) {\n    typeof i == \"undefined\" && (i = new Date()), typeof localStorage != \"undefined\" && (t.useLocalStorage ? $.cookie(n, null) : localStorage.removeItem(n)), t.useLocalStorage && typeof localStorage != \"undefined\" ? localStorage.setItem(n, i) : $.cookie(n, i, {\n      expires: 100\n    });\n  }\n\n  function u() {\n    var n = r();\n    Math.floor((new Date() - n) / 36e5) >= t.dateDiffThresholdInHours && RobloxEventManager.triggerEvent(\"rbx_evt_sitetouch\"), i();\n  }\n\n  var n = \"LastActivity\",\n      t = {\n    updateLastActivityAndFireEvent: u,\n    getLastActivity: r,\n    setLastActivity: i,\n    dateDiffThresholdInHours: 3,\n    useLocalStorage: !1\n  };\n  return t;\n}();\n; /// JSErrorTracker.js\n\ntypeof Roblox == \"undefined\" && (Roblox = {}), Roblox.JSErrorTracker = {\n  showAlert: !1,\n  defaultPixel: \"GA\",\n  internalEventListenerPixelEnabled: !1,\n  javascriptStackTraceEnabled: !1,\n  data: {\n    category: \"Javascript Errors\"\n  },\n  initialize: function initialize(n) {\n    typeof n != \"undefined\" && (typeof n.showAlert != \"undefined\" && (this.showAlert = n.showAlert), typeof n.internalEventListenerPixelEnabled != \"undefined\" && (this.internalEventListenerPixelEnabled = n.internalEventListenerPixelEnabled)), this.addOnErrorEventHandler(this.errorHandler);\n  },\n  errorHandler: function errorHandler(n, t, i) {\n    try {\n      Roblox.JSErrorTracker.data.msg = n, Roblox.JSErrorTracker.data.url = t, Roblox.JSErrorTracker.data.line = i, Roblox.JSErrorTracker.data.ua = window.navigator.userAgent, Roblox.JSErrorTracker.logException(Roblox.JSErrorTracker.data);\n    } catch (r) {}\n\n    return !0;\n  },\n  addOnErrorEventHandler: function addOnErrorEventHandler(n) {\n    var t = window.onerror;\n    window.onerror = typeof window.onerror == \"function\" ? function (i, r, u) {\n      t(i, r, u), n(i, r, u);\n    } : n;\n  },\n  processException: function processException(n, t) {\n    if (typeof n != \"undefined\") {\n      typeof n.category == \"undefined\" && (n.category = Roblox.JSErrorTracker.data.category);\n\n      switch (t) {\n        case \"GA\":\n          var i = {\n            category: \"category\",\n            url: \"action\",\n            msg: \"opt_label\",\n            line: \"opt_value\"\n          };\n          Roblox.JSErrorTracker.fireGAPixel(Roblox.JSErrorTracker.distillGAData(n, i));\n          break;\n\n        case \"Diag\":\n          Roblox.JSErrorTracker.internalEventListenerPixelEnabled && (n.category = \"JavascriptExceptions\", n.shard = \"WebMetrics\", n.eventName = \"JavascriptExceptionLoggingEvent\", RobloxEventManager.triggerEvent(\"JavascriptExceptionLoggingEvent\", n));\n          break;\n\n        default:\n          console.log(\"Roblox JSErrorTracker received an unknown pixel to fire\");\n      }\n\n      return !0;\n    }\n  },\n  logException: function logException(n) {\n    Roblox.JSErrorTracker.processException(n, Roblox.JSErrorTracker.defaultPixel), Roblox.JSErrorTracker.internalEventListenerPixelEnabled && Roblox.JSErrorTracker.processException(n, \"Diag\"), Roblox.JSErrorTracker.showErrorMessage(n.msg);\n  },\n  distillData: function distillData(n, t) {\n    var r = {},\n        i;\n\n    for (i in t) {\n      typeof n[i] != \"undefined\" && (r[t[i]] = encodeURIComponent(n[i]));\n    }\n\n    return r;\n  },\n  distillGAData: function distillGAData(n, t) {\n    var r = Roblox.JSErrorTracker.distillData(n, t),\n        i = [decodeURIComponent([r.category])];\n    return _typeof(r.action) != ( true ? \"undefined\" : 0) ? (i = i.concat(decodeURIComponent(r.action)), _typeof(r.opt_label) != ( true ? \"undefined\" : 0) && (i = i.concat(decodeURIComponent(r.opt_label)), _typeof(r.opt_value) != ( true ? \"undefined\" : 0) && (i = i.concat(parseInt(decodeURIComponent(r.opt_value)))))) : Roblox.JSErrorTracker.showAlert && alert(\"Missing a required parameter for GA\"), i;\n  },\n  createURL: function createURL(n, t, i) {\n    var r = n,\n        f = Roblox.JSErrorTracker.distillData(t, i),\n        u;\n    if (r += \"?\", f != null) for (u in f) {\n      _typeof(u) != ( true ? \"undefined\" : 0) && t.hasOwnProperty(u) && (r += u + \"=\" + f[u] + \"&\");\n    }\n    return r = r.slice(0, r.length - 1);\n  },\n  fireGAPixel: function fireGAPixel(n) {\n    typeof _gaq != \"undefined\" && _gaq.push([\"c._trackEvent\"].concat(n));\n  },\n  showErrorMessage: function showErrorMessage(n) {\n    Roblox.JSErrorTracker.showAlert && (n !== null ? alert(n) : alert(\"An error occured\"));\n  }\n};\n; /// Studio2Alert.js\n\nvar studio2AlertModal = {\n  showPrompt: !1,\n  userId: 0,\n  updateStudioAlertUserPreference: function updateStudioAlertUserPreference() {\n    $.ajax({\n      type: \"GET\",\n      url: \"/WebHandlers/Studio2Alert.ashx?uId=\" + studio2AlertModal.userId\n    });\n  },\n  close: function close() {\n    studio2AlertModal.updateStudioAlertUserPreference(), $.modal.close(\"#Studio2AlertModal\");\n  },\n  init: function init() {\n    studio2AlertModal.showPrompt = $(\"#Studio2AlertModal\").data(\"showprompt\"), studio2AlertModal.userId = $(\"#Studio2AlertModal\").data(\"userid\");\n    var n = {\n      escClose: !0,\n      opacity: 80,\n      overlayCss: {\n        backgroundColor: \"#000\"\n      }\n    };\n    studio2AlertModal.showPrompt && Roblox.Client.isIDE() && (studio2AlertModal.updateStudioAlertUserPreference(), $(\"#Studio2AlertModal\").modal(n));\n  }\n};\n$(\"#closeStudio2Alert\").click(function () {\n  studio2AlertModal.close();\n}), $(function () {\n  studio2AlertModal.init();\n});\n; /// ClientInstaller.js\n\nfunction tryToDownload() {\n  oIFrm = document.getElementById(\"downloadInstallerIFrame\"), oIFrm.src = \"/install/setup.ashx\";\n}\n\nfunction logStatistics(n) {\n  $.get(\"/install/VisitButtonHandler.ashx?reqtype=\" + n, function () {});\n}\n\nType.registerNamespace(\"Roblox.Client\"), Roblox.Client._installHost = null, Roblox.Client._installSuccess = null, Roblox.Client._CLSID = null, Roblox.Client._continuation = null, Roblox.Client._skip = null, Roblox.Client._isIDE = null, Roblox.Client._isRobloxBrowser = null, Roblox.Client._isPlaceLaunch = !1, Roblox.Client._silentModeEnabled = !1, Roblox.Client._bringAppToFrontEnabled = !1, Roblox.Client._numLocks = 0, Roblox.Client._logTiming = !1, Roblox.Client._logStartTime = null, Roblox.Client._logEndTime = null, Roblox.Client._hiddenModeEnabled = !1, Roblox.Client._runInstallABTest = function () {}, Roblox.Client.ReleaseLauncher = function (n, t, i) {\n  if (t && Roblox.Client._numLocks--, (i || Roblox.Client._numLocks <= 0) && (n != null && (document.getElementById(\"pluginObjDiv\").innerHTML = \"\", n = null), Roblox.Client._numLocks = 0), Roblox.Client._logTiming) {\n    Roblox.Client._logEndTime = new Date();\n\n    var r = Roblox.Client._logEndTime.getTime() - Roblox.Client._logStartTime.getTime();\n\n    console && console.log && console.log(\"Roblox.Client: \" + r + \"ms from Create to Release.\");\n  }\n}, Roblox.Client.GetInstallHost = function (n) {\n  if (window.ActiveXObject) return n.InstallHost;\n  var t = n.Get_InstallHost();\n  return t.match(/roblox.com$/) ? t : t.substring(0, t.length - 1);\n}, Roblox.Client.CreateLauncher = function (n) {\n  var i, u, t, r;\n  Roblox.Client._logTiming && (Roblox.Client._logStartTime = new Date()), n && Roblox.Client._numLocks++, (Roblox.Client._installHost == null || Roblox.Client._CLSID == null) && typeof initClientProps == \"function\" && initClientProps(), i = document.getElementById(\"robloxpluginobj\"), u = $(\"#pluginObjDiv\"), i || (Roblox.Client._hiddenModeEnabled = !1, window.ActiveXObject ? (t = '<object classid=\"clsid:' + Roblox.Client._CLSID + '\"', t += ' id=\"robloxpluginobj\" type=\"application/x-vnd-roblox-launcher\"', t += ' codebase=\"' + Roblox.Client._installHost + '\">Failed to INIT Plugin</object>', $(u).append(t)) : (t = '<object id=\"robloxpluginobj\" type=\"application/x-vnd-roblox-launcher\">', t += \"<p>You need Our Plugin for this.  Get the latest version from\", t += '<a href=\"' + Roblox.Client._installHost + '\">here</a>.</p></object>', $(u).append(t)), i = document.getElementById(\"robloxpluginobj\"));\n\n  try {\n    if (i || (typeof console.log == \"undefined\" ? alert(\"Plugin installation failed!\") : console.log(\"Plugin installation failed!\")), i.Hello(), r = Roblox.Client.GetInstallHost(i), !r || r != Roblox.Client._installHost) throw \"wrong InstallHost: (plugins):  \" + r + \"  (servers):  \" + Roblox.Client._installHost;\n    return i;\n  } catch (f) {\n    return Roblox.Client.ReleaseLauncher(i, n, !1), null;\n  }\n}, Roblox.Client.isIDE = function () {\n  if (Roblox.Client._isIDE == null && (Roblox.Client._isIDE = !1, Roblox.Client._isRobloxBrowser = !1, window.external)) try {\n    window.external.IsRobloxAppIDE !== undefined && (Roblox.Client._isIDE = window.external.IsRobloxAppIDE, Roblox.Client._isRobloxBrowser = !0);\n  } catch (n) {}\n  return Roblox.Client._isIDE;\n}, Roblox.Client.isRobloxBrowser = function () {\n  return Roblox.Client.isIDE(), Roblox.Client._isRobloxBrowser;\n}, Roblox.Client.robloxBrowserInstallHost = function () {\n  if (window.external) try {\n    return window.external.InstallHost;\n  } catch (n) {}\n  return \"\";\n}, Roblox.Client.IsRobloxProxyInstalled = function () {\n  var t = Roblox.Client.CreateLauncher(!1),\n      n = !1;\n  return (t != null && (n = !0), Roblox.Client.ReleaseLauncher(t, !1, !1), n || Roblox.Client.isRobloxBrowser()) ? !0 : !1;\n}, Roblox.Client.IsRobloxInstalled = function () {\n  try {\n    var t = Roblox.Client.CreateLauncher(!1),\n        n = Roblox.Client.GetInstallHost(t);\n    return Roblox.Client.ReleaseLauncher(t, !1, !1), n == Roblox.Client._installHost;\n  } catch (i) {\n    return Roblox.Client.isRobloxBrowser() ? (n = Roblox.Client.robloxBrowserInstallHost(), n == Roblox.Client._installHost) : !1;\n  }\n}, Roblox.Client.SetStartInHiddenMode = function (n) {\n  try {\n    var t = Roblox.Client.CreateLauncher(!1);\n    if (t !== null) return t.SetStartInHiddenMode(n), Roblox.Client._hiddenModeEnabled = n, !0;\n  } catch (i) {}\n\n  return !1;\n}, Roblox.Client.UnhideApp = function () {\n  try {\n    if (Roblox.Client._hiddenModeEnabled) {\n      var n = Roblox.Client.CreateLauncher(!1);\n      n.UnhideApp();\n    }\n  } catch (t) {}\n}, Roblox.Client.Update = function () {\n  try {\n    var n = Roblox.Client.CreateLauncher(!1);\n    n.Update(), Roblox.Client.ReleaseLauncher(n, !1, !1);\n  } catch (t) {\n    alert(\"Error updating: \" + t);\n  }\n}, Roblox.Client.WaitForRoblox = function (n) {\n  if (Roblox.Client._skip) return window.location = Roblox.Client._skip, !1;\n\n  if (Roblox.Client._continuation = n, Roblox.Client._cancelled = !1, !Roblox.Client.IsRobloxProxyInstalled() && Roblox.Client.ImplementsProxy) {\n    Roblox.InstallationInstructions.show(), Roblox.Client.runInstallABTest();\n    var t = \"Windows\";\n    return navigator.appVersion.indexOf(\"Mac\") != -1 && (t = \"Mac\"), (typeof _gaq === \"undefined\" ? \"undefined\" : _typeof(_gaq)) != ( true ? \"undefined\" : 0) && (_gaq.push([\"_trackEvent\", \"Install Begin\", t]), _gaq.push([\"b._trackEvent\", \"Install Begin\", t])), RobloxEventManager.triggerEvent(\"rbx_evt_install_begin\", {\n      os: t\n    }), window.chrome && (window.location.hash = \"#chromeInstall\", $.cookie(\"chromeInstall\", n.toString().replace(/play_placeId/, play_placeId.toString()))), window.setTimeout(function () {\n      Roblox.Client._ontimer();\n    }, 1e3), tryToDownload(), !0;\n  }\n\n  return Roblox.Client._continuation(), !1;\n}, Roblox.Client.ResumeTimer = function (n) {\n  Roblox.Client._continuation = n, Roblox.Client._cancelled = !1, window.setTimeout(function () {\n    Roblox.Client._ontimer();\n  }, 0);\n}, Roblox.Client.Refresh = function () {\n  try {\n    navigator.plugins.refresh(!1);\n  } catch (n) {}\n}, Roblox.Client._onCancel = function () {\n  return Roblox.InstallationInstructions.hide(), Roblox.Client._cancelled = !0, !1;\n}, Roblox.Client._ontimer = function () {\n  Roblox.Client._cancelled || (Roblox.Client.Refresh(), Roblox.Client.IsRobloxProxyInstalled() ? (Roblox.InstallationInstructions.hide(), window.setTimeout(function () {\n    window.chrome && window.location.hash == \"#chromeInstall\" && (window.location.hash = \"\", $.cookie(\"chromeInstall\", null));\n  }, 5e3), Roblox.Client._continuation(), Roblox.Client._installSuccess && Roblox.Client._installSuccess()) : window.setTimeout(function () {\n    Roblox.Client._ontimer();\n  }, 1e3));\n};\n; /// InstallationInstructions.js\n\ntypeof Roblox == \"undefined\" && (Roblox = {}), Roblox.InstallationInstructions = function () {\n  function i() {\n    var t, i, r;\n    n(), t = 0, i = $(\".InstallInstructionsImage\"), i && typeof $(i).attr(\"modalwidth\") != \"undefined\" && (t = $(\".InstallInstructionsImage\").attr(\"modalwidth\")), t > 0 ? (r = ($(window).width() - (t - 10)) / 2, $(\"#InstallationInstructions\").modal({\n      escClose: !0,\n      opacity: 50,\n      minWidth: t,\n      maxWidth: t,\n      overlayCss: {\n        backgroundColor: \"#000\"\n      },\n      position: [20, r]\n    })) : $(\"#InstallationInstructions\").modal({\n      escClose: !0,\n      opacity: 50,\n      maxWidth: $(window).width() / 2,\n      minWidth: $(window).width() / 2,\n      overlayCss: {\n        backgroundColor: \"#000\"\n      },\n      position: [20, \"25%\"]\n    });\n  }\n\n  function r() {\n    $.modal.close();\n  }\n\n  function n() {\n    var n = $(\".InstallInstructionsImage\");\n    navigator.userAgent.match(/Mac OS X 10[_|\\.]5/) ? n && typeof $(n).attr(\"oldmacdelaysrc\") != \"undefined\" && $(\".InstallInstructionsImage\").attr(\"src\", $(\".InstallInstructionsImage\").attr(\"oldmacdelaysrc\")) : n && typeof $(n).attr(\"delaysrc\") != \"undefined\" && $(\".InstallInstructionsImage\").attr(\"src\", $(\".InstallInstructionsImage\").attr(\"delaysrc\"));\n  }\n\n  return {\n    show: i,\n    hide: r\n  };\n}();\n; /// MadStatus.js\n\nMadStatus = {\n  running: !1,\n  init: function init(n, t, i, r) {\n    MadStatus.running && MadStatus.stop(), MadStatus.updateInterval = i ? i : 2e3, MadStatus.fadeInterval = r ? r : 1e3, MadStatus.timeout = null, MadStatus.running = !0, MadStatus.field = n, MadStatus.backBuffer = t, MadStatus.field.show(), MadStatus.backBuffer.hide();\n  },\n  participle: [\"Accelerating\", \"Aggregating\", \"Allocating\", \"Aquiring\", \"Automating\", \"Backtracing\", \"Bloxxing\", \"Bootstraping\", \"Calibrating\", \"Correlating\", \"De-noobing\", \"De-ionizing\", \"Deriving\", \"Energizing\", \"Filtering\", \"Generating\", \"Indexing\", \"Loading\", \"Noobing\", \"Optimizing\", \"Oxidizing\", \"Queueing\", \"Parsing\", \"Processing\", \"Rasterizing\", \"Reading\", \"Registering\", \"Re-routing\", \"Resolving\", \"Sampling\", \"Updating\", \"Writing\"],\n  modifier: [\"Blox\", \"Count Zero\", \"Cylon\", \"Data\", \"Ectoplasm\", \"Encryption\", \"Event\", \"Farnsworth\", \"Bebop\", \"Flux Capacitor\", \"Fusion\", \"Game\", \"Gibson\", \"Host\", \"Mainframe\", \"Metaverse\", \"Nerf Herder\", \"Neutron\", \"Noob\", \"Photon\", \"Profile\", \"Script\", \"Skynet\", \"TARDIS\", \"Virtual\"],\n  subject: [\"Analogs\", \"Blocks\", \"Cannon\", \"Channels\", \"Core\", \"Database\", \"Dimensions\", \"Directives\", \"Engine\", \"Files\", \"Gear\", \"Index\", \"Layer\", \"Matrix\", \"Paradox\", \"Parameters\", \"Parsecs\", \"Pipeline\", \"Players\", \"Ports\", \"Protocols\", \"Reactors\", \"Sphere\", \"Spooler\", \"Stream\", \"Switches\", \"Table\", \"Targets\", \"Throttle\", \"Tokens\", \"Torpedoes\", \"Tubes\"],\n  newLib: function newLib() {\n    return libString = this.participle[Math.floor(Math.random() * this.participle.length)] + \" \" + this.modifier[Math.floor(Math.random() * this.modifier.length)] + \" \" + this.subject[Math.floor(Math.random() * this.subject.length)] + \"...\";\n  },\n  start: function start() {\n    MadStatus.timeout == null && (MadStatus.timeout = setInterval(\"MadStatus.update()\", MadStatus.updateInterval), MadStatus.running = !0);\n  },\n  stop: function stop(n) {\n    clearInterval(MadStatus.timeout), MadStatus.timeout = null, MadStatus.field[0].innerHTML = _typeof(n) != ( true ? \"undefined\" : 0) ? n : \"\", MadStatus.running = !1;\n  },\n  manualUpdate: function manualUpdate(n, t, i) {\n    MadStatus.timeout && MadStatus.stop(), this.update(n, i), t && setTimeout(\"MadStatus.start()\", 1e3);\n  },\n  update: function update(n, t) {\n    (MadStatus.backBuffer[0].innerHTML = _typeof(n) != ( true ? \"undefined\" : 0) ? n : this.newLib(), (typeof noAnim === \"undefined\" ? \"undefined\" : _typeof(noAnim)) == ( true ? \"undefined\" : 0) || t != !1) && (this.field.hide(), this.backBuffer.fadeIn(this.fadeInterval + 2, function () {\n      MadStatus.field[0].innerHTML = MadStatus.backBuffer[0].innerHTML, MadStatus.field.show(), MadStatus.backBuffer.hide();\n    }));\n  }\n};\n; /// PlaceLauncher.js\n\nvar RBX = {},\n    RobloxLaunchStates = {\n  StartingServer: \"StartingServer\",\n  StartingClient: \"StartingClient\",\n  Upgrading: \"Upgrading\",\n  None: \"None\"\n},\n    RobloxLaunch = {\n  launchGamePage: null,\n  timer: null,\n  clientMetricType: null,\n  launcher: null,\n  googleAnalyticsCallback: function googleAnalyticsCallback() {\n    RobloxLaunch._GoogleAnalyticsCallback && RobloxLaunch._GoogleAnalyticsCallback();\n  },\n  state: RobloxLaunchStates.None,\n  secureAuthenticate: !1\n},\n    RobloxPlaceLauncherService = {\n  LogJoinClick: function LogJoinClick() {\n    $.get(\"/Game/Placelauncher.ashx\", {\n      request: \"LogJoinClick\"\n    });\n  },\n  RequestGame: function RequestGame(n, t, i, r, u, f) {\n    i = i !== null && i !== undefined ? i : \"\", $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"RequestGame\",\n      placeId: n,\n      isPartyLeader: t,\n      gender: i\n    }, function (n) {\n      n.Error ? u(n.Error, f) : r(n, f);\n    });\n  },\n  RequestPlayWithParty: function RequestPlayWithParty(n, t, i, r, u, f) {\n    $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"RequestPlayWithParty\",\n      placeId: n,\n      partyGuid: t,\n      gameId: i\n    }, function (n) {\n      n.Error ? u(n.Error, f) : r(n, f);\n    });\n  },\n  RequestGroupBuildGame: function RequestGroupBuildGame(n, t, i, r) {\n    $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"RequestGroupBuildGame\",\n      placeId: n\n    }, function (n) {\n      n.Error ? i(n.Error, r) : t(n, r);\n    });\n  },\n  RequestFollowUser: function RequestFollowUser(n, t, i, r) {\n    $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"RequestFollowUser\",\n      userId: n\n    }, function (n) {\n      n.Error ? i(n.Error, r) : t(n, r);\n    });\n  },\n  RequestGameJob: function RequestGameJob(n, t, i, r, u, f) {\n    $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"RequestGameJob\",\n      placeId: n,\n      gameId: t,\n      gameJobId: i\n    }, function (n) {\n      n.Error ? u(n.Error, f) : r(n, f);\n    });\n  },\n  CheckGameJobStatus: function CheckGameJobStatus(n, t, i, r) {\n    $.getJSON(\"/Game/PlaceLauncher.ashx\", {\n      request: \"CheckGameJobStatus\",\n      jobId: n\n    }, function (n) {\n      n.Error ? i(n.Error, r) : t(n, r);\n    });\n  }\n};\nRobloxLaunch.RequestPlayWithParty = function (n, t, i, r) {\n  RobloxPlaceLauncherService.LogJoinClick(), RobloxLaunch.timer = new Date(), RobloxLaunch.state = RobloxLaunchStates.None, RobloxLaunch.clientMetricType = \"WebPlay\", checkRobloxInstall() && (RobloxLaunch.launcher === null && (RobloxLaunch.launcher = new RBX.PlaceLauncher(n)), RobloxLaunch.launcher.RequestPlayWithParty(t, i, r));\n}, RobloxLaunch.RequestGame = function (n, t, i) {\n  RobloxPlaceLauncherService.LogJoinClick(), RobloxLaunch.timer = new Date(), RobloxLaunch.state = RobloxLaunchStates.None, RobloxLaunch.clientMetricType = \"WebPlay\", checkRobloxInstall() && (RobloxLaunch.launcher === null && (RobloxLaunch.launcher = new RBX.PlaceLauncher(n)), RobloxLaunch.launcher.RequestGame(t, i));\n}, RobloxLaunch.RequestGroupBuildGame = function (n, t) {\n  RobloxPlaceLauncherService.LogJoinClick(), RobloxLaunch.timer = new Date(), RobloxLaunch.state = RobloxLaunchStates.None, RobloxLaunch.clientMetricType = \"WebPlay\", checkRobloxInstall() && (RobloxLaunch.launcher === null && (RobloxLaunch.launcher = new RBX.PlaceLauncher(n)), RobloxLaunch.launcher.RequestGroupBuildGame(t));\n}, RobloxLaunch.RequestGameJob = function (n, t, i, r) {\n  RobloxPlaceLauncherService.LogJoinClick(), RobloxLaunch.timer = new Date(), RobloxLaunch.state = RobloxLaunchStates.None, RobloxLaunch.clientMetricType = \"WebJoin\", checkRobloxInstall() && (RobloxLaunch.launcher === null && (RobloxLaunch.launcher = new RBX.PlaceLauncher(n)), RobloxLaunch.launcher.RequestGameJob(t, i, r));\n}, RobloxLaunch.RequestFollowUser = function (n, t) {\n  RobloxPlaceLauncherService.LogJoinClick(), RobloxLaunch.timer = new Date(), RobloxLaunch.state = RobloxLaunchStates.None, RobloxLaunch.clientMetricType = \"WebFollow\", checkRobloxInstall() && (RobloxLaunch.launcher === null && (RobloxLaunch.launcher = new RBX.PlaceLauncher(n)), RobloxLaunch.launcher.RequestFollowUser(t));\n}, RobloxLaunch.StartGame = function (n, t, i, r, u) {\n  var o, f, e, s;\n  RobloxLaunch.secureAuthenticate && (i = i.replace(\"http://\", \"https://\")), n = typeof RobloxLaunch.SeleniumTestMode == \"undefined\" ? n + \"&testmode=false\" : n + \"&testmode=true\", typeof urchinTracker != \"undefined\" && urchinTracker(\"Visit/Try/\" + t), RobloxLaunch.state = RobloxLaunchStates.StartingClient, RobloxLaunch.googleAnalyticsCallback !== null && RobloxLaunch.googleAnalyticsCallback(), o = null;\n\n  try {\n    if (typeof window.external != \"undefined\" && window.external.IsRobloxABApp) window.external.StartGame(r, i, n);else if (typeof window.external != \"undefined\" && window.external.IsRoblox2App && (n.indexOf(\"visit\") != -1 || u)) window.external.StartGame(r, i, n);else if (o = \"RobloxProxy/\", f = Roblox.Client.CreateLauncher(!0), f) {\n      o = \"RobloxProxy/StartGame/\";\n\n      try {\n        try {\n          window.ActiveXObject ? f.AuthenticationTicket = r : f.Put_AuthenticationTicket(r), u && f.SetEditMode();\n        } catch (a) {}\n\n        try {\n          if (Roblox.Client._silentModeEnabled) f.SetSilentModeEnabled(!0), Roblox.VideoPreRoll.videoInitialized && Roblox.VideoPreRoll.isPlaying() && Roblox.Client.SetStartInHiddenMode(!0), f.StartGame(i, n), RobloxLaunch.CheckGameStarted(f);else throw \"silent mode is disabled, fall back\";\n        } catch (a) {\n          if (f.StartGame(i, n), Roblox.Client._bringAppToFrontEnabled) try {\n            f.BringAppToFront();\n          } catch (h) {}\n          Roblox.Client.ReleaseLauncher(f, !0, !1), $.modal.close();\n        }\n      } catch (a) {\n        Roblox.Client.ReleaseLauncher(f, !0, !1);\n        throw a;\n      }\n    } else {\n      try {\n        parent.playFromUrl(n);\n        return;\n      } catch (l) {}\n\n      if (Roblox.Client.isRobloxBrowser()) try {\n        window.external.StartGame(r, i, n);\n      } catch (l) {\n        throw \"window.external fallback failed, Roblox must not be installed or IE cannot access ActiveX\";\n      } else throw \"launcher is null or undefined and external is missing\";\n      RobloxLaunch.state = RobloxLaunchStates.None, $.modal.close();\n    }\n  } catch (a) {\n    if (e = a.message, e === \"User cancelled\" && typeof urchinTracker != \"undefined\") return urchinTracker(\"Visit/UserCancelled/\" + t), !1;\n\n    try {\n      s = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (c) {\n      e = \"FailedXMLHTTP/\" + e;\n    }\n\n    return Roblox.Client.isRobloxBrowser() ? typeof urchinTracker != \"undefined\" && urchinTracker(\"Visit/Fail/\" + o + encodeURIComponent(e)) : (typeof urchinTracker != \"undefined\" && urchinTracker(\"Visit/Redirect/\" + o + encodeURIComponent(e)), window.location = RobloxLaunch.launchGamePage), !1;\n  }\n\n  return typeof urchinTracker != \"undefined\" && urchinTracker(\"Visit/Success/\" + t), !0;\n}, RobloxLaunch.CheckGameStarted = function (n) {\n  function r() {\n    var e = !1;\n\n    try {\n      if (i || (i = window.ActiveXObject ? n.IsGameStarted : n.Get_GameStarted()), i && !Roblox.VideoPreRoll.isPlaying()) {\n        if (MadStatus.stop(\"Connecting to Players...\"), RobloxLaunch.state = RobloxLaunchStates.None, $.modal.close(), t._cancelled = !0, Roblox.Client._hiddenModeEnabled && Roblox.Client.UnhideApp(), Roblox.Client._bringAppToFrontEnabled) try {\n          n.BringAppToFront();\n        } catch (f) {}\n        Roblox.Client.ReleaseLauncher(n, !0, !1);\n      } else t._cancelled || setTimeout(r, 1e3);\n    } catch (u) {\n      t._cancelled || setTimeout(r, 1e3);\n    }\n  }\n\n  var t = RobloxLaunch.launcher,\n      i;\n  t === null && (t = new RBX.PlaceLauncher(\"PlaceLauncherStatusPanel\"), t._showDialog(), t._updateStatus(0)), i = !1, r();\n}, RobloxLaunch.CheckRobloxInstall = function (n) {\n  if (Roblox.Client.IsRobloxInstalled()) return Roblox.Client.Update(), !0;\n  window.location = n;\n}, RBX.PlaceLauncher = function (n) {\n  this._cancelled = !1, this._popupID = n, this._popup = $(\"#\" + n);\n}, RBX.PlaceLauncher.prototype = {\n  _showDialog: function _showDialog() {\n    this._cancelled = !1, _popupOptions = {\n      escClose: !0,\n      opacity: 80,\n      overlayCss: {\n        backgroundColor: \"#000\"\n      }\n    }, this._popupID == \"PlaceLauncherStatusPanel\" && (Roblox.VideoPreRoll && Roblox.VideoPreRoll.showVideoPreRoll && !Roblox.VideoPreRoll.isExcluded() ? (this._popup = $(\"#videoPrerollPanel\"), _popupOptions.onShow = function (n) {\n      Roblox.VideoPreRoll.correctIEModalPosition(n), Roblox.VideoPreRoll.start();\n    }, _popupOptions.onClose = function () {\n      Roblox.VideoPreRoll.close();\n    }, _popupOptions.closeHTML = '<a href=\"#\" class=\"ImageButton closeBtnCircle_35h ABCloseCircle VprCloseButton\"></a>') : (this._popup = $(\"#\" + this._popupID), _popupOptions.onClose = function () {\n      Roblox.VideoPreRoll.logVideoPreRoll(), $.modal.close();\n    })), this._popup.modal(_popupOptions);\n    var n = this;\n    $(\".CancelPlaceLauncherButton\").click(function () {\n      n.CancelLaunch();\n    }), $(\".CancelPlaceLauncherButton\").show();\n  },\n  _reportDuration: function _reportDuration(n, t) {\n    $.ajax({\n      type: \"GET\",\n      async: !0,\n      cache: !1,\n      timeout: 5e4,\n      url: \"/Game/JoinRate.ashx?c=\" + RobloxLaunch.clientMetricType + \"&r=\" + t + \"&d=\" + n,\n      success: function success() {}\n    });\n  },\n  _onGameStatus: function _onGameStatus(n) {\n    var r, i, t;\n\n    if (this._cancelled) {\n      r = +new Date() - RobloxLaunch.timer.getTime(), this._reportDuration(r, \"Cancel\");\n      return;\n    }\n\n    if (this._updateStatus(n.status), n.status === 2) RobloxLaunch.StartGame(n.joinScriptUrl, \"Join\", n.authenticationUrl, n.authenticationTicket), i = +new Date() - RobloxLaunch.timer.getTime(), this._reportDuration(i, \"Success\");else if (n.status < 2 || n.status === 6) {\n      var f = function f(n, t) {\n        t._onGameStatus(n);\n      },\n          e = function e(n, t) {\n        t._onGameError(n);\n      },\n          o = this,\n          u = function u() {\n        RobloxPlaceLauncherService.CheckGameJobStatus(n.jobId, f, e, o);\n      };\n\n      window.setTimeout(u, 2e3);\n    } else n.status === 4 && (t = +new Date() - RobloxLaunch.timer.getTime(), this._reportDuration(t, \"Failure\"));\n  },\n  _updateStatus: function _updateStatus(n) {\n    MadStatus.running || (MadStatus.init($(this._popup).find(\".MadStatusField\"), $(this._popup).find(\".MadStatusBackBuffer\"), 2e3, 800), MadStatus.start());\n\n    switch (n) {\n      case 0:\n        break;\n\n      case 1:\n        MadStatus.manualUpdate(\"A server is loading the game...\", !0);\n        break;\n\n      case 2:\n        MadStatus.manualUpdate(\"The server is ready. Joining the game...\", !0);\n        break;\n\n      case 3:\n        MadStatus.manualUpdate(\"Joining games is temporarily disabled while we upgrade. Please try again soon.\", !1);\n        break;\n\n      case 4:\n        MadStatus.manualUpdate(\"An error occurred. Please try again later.\", !1);\n        break;\n\n      case 5:\n        MadStatus.manualUpdate(\"The game you requested has ended.\", !1);\n        break;\n\n      case 6:\n        MadStatus.manualUpdate(\"The game you requested is currently full. Waiting for an opening...\", !0, !1);\n        break;\n\n      case 7:\n        MadStatus.manualUpdate(\"Roblox is updating. Please wait...\", !0);\n        break;\n\n      case 8:\n        MadStatus.manualUpdate(\"Requesting a server\", !0);\n        break;\n\n      default:\n        MadStatus.stop(\"Connecting to Players...\");\n    }\n\n    $(this._popup).find(\".MadStatusStarting\").css(\"display\", \"none\"), $(this._popup).find(\".MadStatusSpinner\").css(\"visibility\", n === 3 || n === 4 || n === 5 ? \"hidden\" : \"visible\");\n  },\n  _onGameError: function _onGameError() {\n    this._updateStatus(4);\n  },\n  _startUpdatePolling: function _startUpdatePolling(n) {\n    var t, i;\n\n    try {\n      if (RobloxLaunch.state = RobloxLaunchStates.Upgrading, t = Roblox.Client.CreateLauncher(!0), i = window.ActiveXObject ? t.IsUpToDate : t.Get_IsUpToDate(), i || i === undefined) {\n        try {\n          t.PreStartGame();\n        } catch (e) {}\n\n        Roblox.Client.ReleaseLauncher(t, !0, !1), RobloxLaunch.state = RobloxLaunchStates.StartingServer, n();\n        return;\n      }\n\n      var f = function f(t, i, r) {\n        r._onUpdateStatus(t, i, n);\n      },\n          u = function u(n, t) {\n        t._onUpdateError(n);\n      },\n          r = this;\n\n      this.CheckUpdateStatus(f, u, t, n, r);\n    } catch (e) {\n      Roblox.Client.ReleaseLauncher(t, !0, !1), n();\n    }\n  },\n  _onUpdateStatus: function _onUpdateStatus(n, t, i) {\n    if (!this._cancelled) if (this._updateStatus(n), n === 8) Roblox.Client.ReleaseLauncher(t, !0, !0), Roblox.Client.Refresh(), RobloxLaunch.state = RobloxLaunchStates.StartingServer, i();else if (n === 7) {\n      var f = function f(n, t, r) {\n        r._onUpdateStatus(n, t, i);\n      },\n          e = function e(n, t) {\n        t._onUpdateError(n);\n      },\n          r = this,\n          u = function u() {\n        r.CheckUpdateStatus(f, e, t, i, r);\n      };\n\n      window.setTimeout(u, 2e3);\n    } else alert(\"Unknown status from CheckUpdateStatus\");\n  },\n  _onUpdateError: function _onUpdateError() {\n    this._updateStatus(2);\n  },\n  CheckUpdateStatus: function CheckUpdateStatus(n, t, i, r, u) {\n    try {\n      if (i.PreStartGame(), window.ActiveXObject) var f = i.IsUpToDate;else f = i.Get_IsUpToDate();\n      f || f === undefined ? n(8, i, u) : n(7, i, u);\n    } catch (e) {\n      n(8, i, u);\n    }\n  },\n  RequestGame: function RequestGame(n, t) {\n    var r;\n\n    this._showDialog();\n\n    var f = function f(n, t) {\n      t._onGameStatus(n);\n    },\n        u = function u(n, t) {\n      t._onGameError(n);\n    },\n        e = this,\n        i = !1;\n\n    return typeof Party != \"undefined\" && typeof Party.AmILeader == \"function\" && (i = Party.AmILeader()), r = function r() {\n      RobloxPlaceLauncherService.RequestGame(n, i, t, f, u, e);\n    }, this._startUpdatePolling(r), !1;\n  },\n  RequestPlayWithParty: function RequestPlayWithParty(n, t, i) {\n    this._showDialog();\n\n    var f = function f(n, t) {\n      t._onGameStatus(n);\n    },\n        e = function e(n, t) {\n      t._onGameError(n);\n    },\n        r = this,\n        u = function u() {\n      RobloxPlaceLauncherService.RequestPlayWithParty(n, t, i, f, e, r);\n    };\n\n    return this._startUpdatePolling(u), !1;\n  },\n  RequestGroupBuildGame: function RequestGroupBuildGame(n) {\n    this._showDialog();\n\n    var r = function r(n, t) {\n      t._onGameStatus(n, !0);\n    },\n        u = function u(n, t) {\n      t._onGameError(n);\n    },\n        t = this,\n        i = function i() {\n      RobloxPlaceLauncherService.RequestGroupBuildGame(n, r, u, t);\n    };\n\n    return this._startUpdatePolling(i), !1;\n  },\n  RequestFollowUser: function RequestFollowUser(n) {\n    this._showDialog();\n\n    var r = function r(n, t) {\n      t._onGameStatus(n);\n    },\n        u = function u(n, t) {\n      t._onError(n);\n    },\n        t = this,\n        i = function i() {\n      RobloxPlaceLauncherService.RequestFollowUser(n, r, u, t);\n    };\n\n    return this._startUpdatePolling(i), !1;\n  },\n  RequestGameJob: function RequestGameJob(n, t, i) {\n    this._showDialog();\n\n    var f = function f(n, t) {\n      t._onGameStatus(n);\n    },\n        e = function e(n, t) {\n      t._onGameError(n);\n    },\n        r = this,\n        u = function u() {\n      RobloxPlaceLauncherService.RequestGameJob(n, t, i, f, e, r);\n    };\n\n    return this._startUpdatePolling(u), !1;\n  },\n  CancelLaunch: function CancelLaunch() {\n    return this._cancelled = !0, $.modal.close(), !1;\n  },\n  dispose: function dispose() {\n    RBX.PlaceLauncher.callBaseMethod(this, \"dispose\");\n  }\n};\n; /// VideoPreRoll.js\n\nfunction openVideoPreroll2(n) {\n  Roblox.VideoPreRoll.test(n);\n}\n\nfunction flashCheck(n) {\n  var i = !1,\n      t,\n      r;\n  if (window.ActiveXObject) try {\n    t = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.\" + n), i = !0;\n  } catch (u) {} else navigator.plugins && navigator.mimeTypes.length > 0 && (t = navigator.plugins[\"Shockwave Flash\"], t && (r = navigator.plugins[\"Shockwave Flash\"].description.replace(/.*\\s(\\d+\\.\\d+).*/, \"$1\"), r >= n && (i = !0)));\n  return i;\n}\n\ntypeof Roblox == \"undefined\" && (Roblox = {}), Roblox.VideoPreRoll = {\n  newValue: \"\",\n  showVideoPreRoll: !1,\n  videoInitialized: !1,\n  videoStarted: !1,\n  videoCompleted: !1,\n  videoSkipped: !1,\n  videoCancelled: !1,\n  videoErrored: !1,\n  videoOptions: {\n    key: \"integration_test\",\n    companionId: \"videoPrerollCompanionAd\"\n  },\n  myvpaidad: null,\n  loadingBarMaxTime: 3e4,\n  loadingBarCurrentTime: 0,\n  loadingBarIntervalID: 0,\n  loadingBarID: \"videoPrerollLoadingBar\",\n  loadingBarInnerID: \"videoPrerollLoadingBarCompleted\",\n  loadingBarPercentageID: \"videoPrerollLoadingPercent\",\n  videoLoadingTimeout: 7e3,\n  videoPlayingTimeout: 23e3,\n  videoLogNote: \"\",\n  logsEnabled: !1,\n  excludedPlaceIds: \"\",\n  specificAdOnPlacePageEnabled: !1,\n  specificAdOnPlacePageId: 0,\n  specificAdOnPlacePageCategory: \"\",\n  checkEligibility: function checkEligibility() {\n    Roblox.VideoPreRoll.showVideoPreRoll && (flashCheck(8) ? typeof __adaptv__ == \"undefined\" ? (Roblox.VideoPreRoll.videoLogNote = \"NoAdapTv\", Roblox.VideoPreRoll.showVideoPreRoll = !1) : Roblox.Client.IsRobloxInstalled() ? Roblox.Client.isIDE() ? (Roblox.VideoPreRoll.videoLogNote = \"RobloxStudio\", Roblox.VideoPreRoll.showVideoPreRoll = !1) : Roblox.Client.isRobloxBrowser() ? (Roblox.VideoPreRoll.videoLogNote = \"RobloxPlayer\", Roblox.VideoPreRoll.showVideoPreRoll = !1) : window.chrome && window.location.hash == \"#chromeInstall\" && (Roblox.VideoPreRoll.showVideoPreRoll = !1) : Roblox.VideoPreRoll.showVideoPreRoll = !1 : (Roblox.VideoPreRoll.videoLogNote = \"NoFlash\", Roblox.VideoPreRoll.showVideoPreRoll = !1));\n  },\n  isExcluded: function isExcluded() {\n    var t, n;\n    if (Roblox.VideoPreRoll.showVideoPreRoll && Roblox.VideoPreRoll.excludedPlaceIds !== \"\" && (t = Roblox.VideoPreRoll.excludedPlaceIds.split(\",\"), typeof play_placeId != \"undefined\")) for (n = 0; n < t.length; n++) {\n      if (play_placeId == t[n]) return Roblox.VideoPreRoll.videoLogNote = \"ExcludedPlace\", !0;\n    }\n    return !1;\n  },\n  start: function start() {\n    var i, r, t, n;\n    this.videoInitialized = !0, this.videoStarted = !1, this.videoCancelled = !1, this.videoCompleted = !1, this.videoSkipped = !1, this.loadingBarCurrentTime = 0, this.videoLogNote = \"\", Roblox.VideoPreRoll.specificAdOnPlacePageEnabled && typeof play_placeId != \"undefined\" && (i = \",\" + Roblox.VideoPreRoll.specificAdOnPlacePageCategory, play_placeId == Roblox.VideoPreRoll.specificAdOnPlacePageId && Roblox.VideoPreRoll.videoOptions.categories.indexOf(i) == -1 && (Roblox.VideoPreRoll.videoOptions.categories += i)), r = __adaptv__, this.myvpaidad = new r.ads.vpaid.VPAIDAd(\"videoPrerollMainDiv\"), t = 1e3, LoadingBar.init(this.loadingBarID, this.loadingBarInnerID, this.loadingBarPercentageID), this.loadingBarIntervalID = setInterval(function () {\n      Roblox.VideoPreRoll.loadingBarCurrentTime += t, LoadingBar.update(Roblox.VideoPreRoll.loadingBarID, Roblox.VideoPreRoll.loadingBarCurrentTime / Roblox.VideoPreRoll.loadingBarMaxTime);\n    }, t), n = r.ads.vpaid.VPAIDEvent;\n    this.myvpaidad.on(n.AdLoaded, function (n) {\n      Roblox.VideoPreRoll._onVideoLoaded(n);\n    });\n    this.myvpaidad.on(n.AdStarted, function (n) {\n      Roblox.VideoPreRoll._onVideoStart(n);\n    });\n    this.myvpaidad.on(n.AdStopped, function (n) {\n      Roblox.VideoPreRoll._onVideoComplete(n);\n    });\n    this.myvpaidad.on(n.AdError, function (n) {\n      Roblox.VideoPreRoll._onVideoError(n);\n    });\n\n    try {\n      this.myvpaidad.initAd(391, 312, this.videoOptions);\n    } catch (u) {\n      f();\n    }\n  },\n  error: function error() {\n    clearInterval(loadingBarInterval);\n  },\n  cancel: function cancel() {\n    this.videoCancelled = !0, $.modal.close();\n  },\n  skip: function skip() {\n    this.videoCompleted = !0, this.videoSkipped = !0, this.showVideoPreRoll = !1;\n  },\n  close: function close() {\n    MadStatus.running && MadStatus.stop(\"\"), RobloxLaunch.launcher && (RobloxLaunch.launcher._cancelled = !0), clearInterval(this.loadingBarIntervalID), LoadingBar.dispose(this.loadingBarID);\n\n    try {\n      this.myvpaidad.stopAd();\n    } catch (n) {}\n\n    this.isPlaying() && (this.videoCancelled = !0), $.modal.close(), this.logVideoPreRoll();\n  },\n  _onVideoError: function f() {\n    this.videoCompleted = !0, this.videoErrored = !0;\n  },\n  _onVideoLoaded: function _onVideoLoaded(n) {\n    try {\n      this.myvpaidad.startAd();\n    } catch (t) {\n      f(n);\n    }\n  },\n  _onVideoStart: function _onVideoStart() {\n    this.videoStarted = !0;\n  },\n  _onVideoComplete: function _onVideoComplete() {\n    this.videoStarted && this.videoCancelled == !1 && (this.videoCompleted = !0, this.showVideoPreRoll = !1, this.newValue != \"\" && $.cookie(\"RBXVPR\", this.newValue, 180));\n  },\n  logVideoPreRoll: function logVideoPreRoll() {\n    if (Roblox.VideoPreRoll.logsEnabled) {\n      var n = \"\";\n      if (Roblox.VideoPreRoll.videoCompleted) n = \"Complete\", Roblox.VideoPreRoll.videoLogNote == \"\" && (Roblox.VideoPreRoll.videoLogNote = \"NoTimeout\"), Roblox.VideoPreRoll.logsEnabled = !1;else if (Roblox.VideoPreRoll.videoCancelled) n = \"Cancelled\", Roblox.VideoPreRoll.videoLogNote = RobloxLaunch.state;else if (Roblox.VideoPreRoll.videoInitialized == !1 && Roblox.VideoPreRoll.videoLogNote != \"\") n = \"Failed\", Roblox.VideoPreRoll.logsEnabled = !1;else return;\n      GoogleAnalyticsEvents.FireEvent([\"PreRoll\", n, Roblox.VideoPreRoll.videoLogNote]);\n    }\n  },\n  isPlaying: function isPlaying() {\n    return Roblox.VideoPreRoll.videoInitialized ? (Roblox.VideoPreRoll.videoInitialized && !Roblox.VideoPreRoll.videoStarted && Roblox.VideoPreRoll.loadingBarCurrentTime > Roblox.VideoPreRoll.videoLoadingTimeout && (Roblox.VideoPreRoll.videoCompleted = !0, Roblox.VideoPreRoll.videoLogNote = \"LoadingTimeout\"), Roblox.VideoPreRoll.videoStarted && !Roblox.VideoPreRoll.videoCompleted && Roblox.VideoPreRoll.loadingBarCurrentTime > Roblox.VideoPreRoll.videoPlayingTimeout && (Roblox.VideoPreRoll.videoCompleted = !0, Roblox.VideoPreRoll.videoLogNote = \"PlayingTimeout\"), !Roblox.VideoPreRoll.videoCompleted) : !1;\n  },\n  correctIEModalPosition: function correctIEModalPosition(n) {\n    if (n.container.innerHeight() <= 30) {\n      var i = $(\"#videoPrerollPanel\"),\n          t = -Math.floor(i.innerHeight() / 2);\n      i.css({\n        position: \"relative\",\n        top: t + \"px\"\n      }), n.container.find(\".VprCloseButton\").css({\n        top: t - 10 + \"px\",\n        \"z-index\": \"1003\"\n      });\n    }\n  },\n  test: function test() {\n    _popupOptions = {\n      escClose: !0,\n      opacity: 80,\n      overlayCss: {\n        backgroundColor: \"#000\"\n      },\n      onShow: function onShow(n) {\n        Roblox.VideoPreRoll.correctIEModalPosition(n), Roblox.VideoPreRoll.start();\n      },\n      onClose: function onClose() {\n        Roblox.VideoPreRoll.close();\n      },\n      closeHTML: '<a href=\"#\" class=\"ImageButton closeBtnCircle_35h ABCloseCircle VprCloseButton\"></a>'\n    }, $(\"#videoPrerollPanel\").modal(_popupOptions), MadStatus.running || (MadStatus.init($(\"#videoPrerollPanel\").find(\".MadStatusField\"), $(\"#videoPrerollPanel\").find(\".MadStatusBackBuffer\"), 2e3, 800), MadStatus.start()), $(\"#videoPrerollPanel\").find(\".MadStatusStarting\").css(\"display\", \"none\"), $(\"#videoPrerollPanel\").find(\".MadStatusSpinner\").css(\"visibility\", status === 3 || status === 4 || status === 5 ? \"hidden\" : \"visible\");\n  }\n};\nvar LoadingBar = {\n  bars: [],\n  init: function init(n, t, i, r) {\n    var u = this.get(n);\n    u == null && (u = {}), u.barID = n, u.innerBarID = t, u.percentageID = i, typeof r == \"undefined\" && (u.percentComplete = 0), this.bars.push(u), this.update(n, u.percentComplete);\n  },\n  get: function get(n) {\n    for (var t = 0; t < this.bars.length; t++) {\n      if (this.bars[t].barID == n) return this.bars[t];\n    }\n\n    return null;\n  },\n  dispose: function dispose(n) {\n    for (var t = 0; t < this.bars.length; t++) {\n      this.bars[t].barID == n && this.bars.splice(t, 1);\n    }\n  },\n  update: function update(n, t) {\n    var i = this.get(n),\n        u,\n        r;\n    i && (t > 1 && (t = 1), u = $(\"#\" + n).width(), r = Math.round(u * t), $(\"#\" + i.innerBarID).animate({\n      width: r\n    }, 200, \"swing\"), i.percentageID && $(\"#\" + i.percentageID).length > 0 && $(\"#\" + i.percentageID).html(Math.round(t * 100) + \"%\"), i.percentComplete = t);\n  }\n}; // end roblox.js//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NzVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9zYXNzL2FwcC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;